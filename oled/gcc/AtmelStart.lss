
AtmelStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001868  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000004c  20000000  00001868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000268  2000004c  000018b4  0002004c  2**2
                  ALLOC
  3 .stack        00002004  200002b4  00001b1c  0002004c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
  5 .comment      00000049  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  6 .debug_info   000233e3  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000368a  00000000  00000000  000434a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loc    0000c5a9  00000000  00000000  00046b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000a90  00000000  00000000  000530d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_ranges 00002200  00000000  00000000  00053b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_macro  00007d4c  00000000  00000000  00055d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00013a32  00000000  00000000  0005daaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00079ee5  00000000  00000000  000714e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame  00001ce0  00000000  00000000  000eb3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <exception_table>:
       0:	b8 22 00 20 f9 03 00 00 f5 03 00 00 f5 03 00 00     .". ............
	...
      2c:	f5 03 00 00 00 00 00 00 00 00 00 00 f5 03 00 00     ................
      3c:	f5 03 00 00 f5 03 00 00 f5 03 00 00 f5 03 00 00     ................
      4c:	f5 03 00 00 f5 03 00 00 f5 03 00 00 f5 03 00 00     ................
      5c:	f5 03 00 00 f5 03 00 00 f5 03 00 00 f5 03 00 00     ................
      6c:	f5 03 00 00 f5 03 00 00 f5 03 00 00 f5 03 00 00     ................
      7c:	f5 03 00 00 f5 03 00 00 f5 03 00 00 f5 03 00 00     ................
      8c:	f5 03 00 00 f5 03 00 00 f5 03 00 00 f5 03 00 00     ................
      9c:	f5 03 00 00 f5 03 00 00 f5 03 00 00 f5 03 00 00     ................
	...

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000004c 	.word	0x2000004c
      d4:	00000000 	.word	0x00000000
      d8:	00001868 	.word	0x00001868

000000dc <frame_dummy>:
      dc:	4b04      	ldr	r3, [pc, #16]	; (f0 <frame_dummy+0x14>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4903      	ldr	r1, [pc, #12]	; (f4 <frame_dummy+0x18>)
      e6:	4804      	ldr	r0, [pc, #16]	; (f8 <frame_dummy+0x1c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	bd10      	pop	{r4, pc}
      ee:	46c0      	nop			; (mov r8, r8)
      f0:	00000000 	.word	0x00000000
      f4:	20000050 	.word	0x20000050
      f8:	00001868 	.word	0x00001868

000000fc <ug2832hsweg04_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void ug2832hsweg04_put_page(const struct display_mono *const me, const enum gfx_mono_color *data,
                            const gfx_coord_t page, const gfx_coord_t page_offset, const gfx_coord_t width)
{
      fc:	b5f0      	push	{r4, r5, r6, r7, lr}
      fe:	001e      	movs	r6, r3
     100:	000f      	movs	r7, r1
     102:	0015      	movs	r5, r2
     104:	b085      	sub	sp, #20
     106:	ab0a      	add	r3, sp, #40	; 0x28
     108:	781b      	ldrb	r3, [r3, #0]
     10a:	9002      	str	r0, [sp, #8]
     10c:	9303      	str	r3, [sp, #12]
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_page(&disp->framebuffer.parent, data, page, page_offset, width);
     10e:	9300      	str	r3, [sp, #0]
     110:	4c06      	ldr	r4, [pc, #24]	; (12c <ug2832hsweg04_put_page+0x30>)
     112:	0033      	movs	r3, r6
     114:	3018      	adds	r0, #24
     116:	47a0      	blx	r4
#endif
	display_mono_put_page(&disp->parent, data, page, page_offset, width);
     118:	9b03      	ldr	r3, [sp, #12]
     11a:	002a      	movs	r2, r5
     11c:	9300      	str	r3, [sp, #0]
     11e:	0039      	movs	r1, r7
     120:	0033      	movs	r3, r6
     122:	9802      	ldr	r0, [sp, #8]
     124:	4c02      	ldr	r4, [pc, #8]	; (130 <ug2832hsweg04_put_page+0x34>)
     126:	47a0      	blx	r4
}
     128:	b005      	add	sp, #20
     12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     12c:	00000205 	.word	0x00000205
     130:	00000375 	.word	0x00000375

00000134 <ug2832hsweg04_draw_pixel>:
/**
 * \brief Draw pixel to screen
 */
void ug2832hsweg04_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                              const enum gfx_mono_color color)
{
     134:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_draw_pixel(&disp->parent, x, y, color, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT, 8);
     136:	2408      	movs	r4, #8
     138:	9402      	str	r4, [sp, #8]
     13a:	3418      	adds	r4, #24
     13c:	9401      	str	r4, [sp, #4]
     13e:	3460      	adds	r4, #96	; 0x60
     140:	9400      	str	r4, [sp, #0]
     142:	4c01      	ldr	r4, [pc, #4]	; (148 <ug2832hsweg04_draw_pixel+0x14>)
     144:	47a0      	blx	r4
}
     146:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     148:	00000301 	.word	0x00000301

0000014c <ug2832hsweg04_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void ug2832hsweg04_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const uint8_t data)
{
     14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     14e:	000f      	movs	r7, r1
     150:	0015      	movs	r5, r2
     152:	001e      	movs	r6, r3
     154:	9001      	str	r0, [sp, #4]
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	framebuffer_put_byte(&disp->framebuffer.parent, page, column, data);
     156:	4c05      	ldr	r4, [pc, #20]	; (16c <ug2832hsweg04_put_byte+0x20>)
     158:	3018      	adds	r0, #24
     15a:	47a0      	blx	r4
#endif
	display_mono_put_byte(&disp->parent, page, column, data);
     15c:	0033      	movs	r3, r6
     15e:	002a      	movs	r2, r5
     160:	0039      	movs	r1, r7
     162:	9801      	ldr	r0, [sp, #4]
     164:	4c02      	ldr	r4, [pc, #8]	; (170 <ug2832hsweg04_put_byte+0x24>)
     166:	47a0      	blx	r4
}
     168:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     16a:	46c0      	nop			; (mov r8, r8)
     16c:	00000225 	.word	0x00000225
     170:	00000299 	.word	0x00000299

00000174 <ug2832hsweg04_get_byte>:

/**
 * \brief Get a byte from the display controller RAM
 */
uint8_t ug2832hsweg04_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
     174:	b510      	push	{r4, lr}
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

#if CONF_UG2832HSWEG04_FRAMEBUFFER == 1
	return framebuffer_get_byte(&disp->framebuffer.parent, page, column);
     176:	4b02      	ldr	r3, [pc, #8]	; (180 <ug2832hsweg04_get_byte+0xc>)
     178:	3018      	adds	r0, #24
     17a:	4798      	blx	r3
#else
	return display_mono_get_byte(&disp->parent, page, column);
#endif
}
     17c:	bd10      	pop	{r4, pc}
     17e:	46c0      	nop			; (mov r8, r8)
     180:	00000233 	.word	0x00000233

00000184 <ug2832hsweg04_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void ug2832hsweg04_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                             const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
     184:	b513      	push	{r0, r1, r4, lr}
     186:	ac04      	add	r4, sp, #16
     188:	7824      	ldrb	r4, [r4, #0]
	struct ug2832hsweg04 *disp = (struct ug2832hsweg04 *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
     18a:	9400      	str	r4, [sp, #0]
     18c:	4c01      	ldr	r4, [pc, #4]	; (194 <ug2832hsweg04_mask_byte+0x10>)
     18e:	47a0      	blx	r4
}
     190:	bd13      	pop	{r0, r1, r4, pc}
     192:	46c0      	nop			; (mov r8, r8)
     194:	000002bf 	.word	0x000002bf

00000198 <ug2832hsweg04_construct>:
{
     198:	b5f0      	push	{r4, r5, r6, r7, lr}
	display_mono_construct(&display->parent,
     19a:	0005      	movs	r5, r0
{
     19c:	0004      	movs	r4, r0
     19e:	b087      	sub	sp, #28
     1a0:	9303      	str	r3, [sp, #12]
     1a2:	ab0c      	add	r3, sp, #48	; 0x30
     1a4:	781b      	ldrb	r3, [r3, #0]
	display_mono_construct(&display->parent,
     1a6:	350c      	adds	r5, #12
{
     1a8:	9304      	str	r3, [sp, #16]
     1aa:	ab0d      	add	r3, sp, #52	; 0x34
     1ac:	781b      	ldrb	r3, [r3, #0]
     1ae:	000f      	movs	r7, r1
     1b0:	9305      	str	r3, [sp, #20]
	display_mono_construct(&display->parent,
     1b2:	4b0f      	ldr	r3, [pc, #60]	; (1f0 <ug2832hsweg04_construct+0x58>)
     1b4:	0029      	movs	r1, r5
{
     1b6:	9202      	str	r2, [sp, #8]
	display_mono_construct(&display->parent,
     1b8:	9300      	str	r3, [sp, #0]
     1ba:	2280      	movs	r2, #128	; 0x80
     1bc:	2320      	movs	r3, #32
     1be:	4e0d      	ldr	r6, [pc, #52]	; (1f4 <ug2832hsweg04_construct+0x5c>)
     1c0:	47b0      	blx	r6
	ssd1306_construct(&display->dc.parent, io, cs, res, dc);
     1c2:	9b05      	ldr	r3, [sp, #20]
     1c4:	9a03      	ldr	r2, [sp, #12]
     1c6:	9902      	ldr	r1, [sp, #8]
     1c8:	9300      	str	r3, [sp, #0]
     1ca:	0028      	movs	r0, r5
     1cc:	9b04      	ldr	r3, [sp, #16]
     1ce:	4d0a      	ldr	r5, [pc, #40]	; (1f8 <ug2832hsweg04_construct+0x60>)
     1d0:	47a8      	blx	r5
	framebuffer_construct(&display->framebuffer.parent, framebuffer, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT);
     1d2:	0020      	movs	r0, r4
     1d4:	0039      	movs	r1, r7
     1d6:	2320      	movs	r3, #32
     1d8:	2280      	movs	r2, #128	; 0x80
     1da:	4d08      	ldr	r5, [pc, #32]	; (1fc <ug2832hsweg04_construct+0x64>)
     1dc:	3018      	adds	r0, #24
     1de:	47a8      	blx	r5
	display_mono_init(me, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_PAGES);
     1e0:	0020      	movs	r0, r4
     1e2:	2204      	movs	r2, #4
     1e4:	2180      	movs	r1, #128	; 0x80
     1e6:	4b06      	ldr	r3, [pc, #24]	; (200 <ug2832hsweg04_construct+0x68>)
     1e8:	4798      	blx	r3
}
     1ea:	0020      	movs	r0, r4
     1ec:	b007      	add	sp, #28
     1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1f0:	20000000 	.word	0x20000000
     1f4:	0000028d 	.word	0x0000028d
     1f8:	00000d95 	.word	0x00000d95
     1fc:	0000026d 	.word	0x0000026d
     200:	000003ad 	.word	0x000003ad

00000204 <framebuffer_put_page>:
/**
 * \brief Put a page from RAM to the buffer in RAM.
 */
void framebuffer_put_page(const struct display_mono *const me, const enum gfx_mono_color *const data,
                          const gfx_coord_t page, const gfx_coord_t page_offset, gfx_coord_t width)
{
     204:	b530      	push	{r4, r5, lr}
	const struct framebuffer * disp           = (const struct framebuffer *)me;
	const enum gfx_mono_color *data_pt        = data;
	gfx_coord_t *              framebuffer_pt = disp->fbpointer + ((page * disp->parent.width) + page_offset);
     206:	7905      	ldrb	r5, [r0, #4]
{
     208:	ac03      	add	r4, sp, #12
	gfx_coord_t *              framebuffer_pt = disp->fbpointer + ((page * disp->parent.width) + page_offset);
     20a:	436a      	muls	r2, r5
     20c:	18d2      	adds	r2, r2, r3
     20e:	68c3      	ldr	r3, [r0, #12]
{
     210:	7824      	ldrb	r4, [r4, #0]
	gfx_coord_t *              framebuffer_pt = disp->fbpointer + ((page * disp->parent.width) + page_offset);
     212:	189a      	adds	r2, r3, r2
     214:	2300      	movs	r3, #0

	do {
		*framebuffer_pt++ = *data_pt++;
     216:	5cc8      	ldrb	r0, [r1, r3]
     218:	54d0      	strb	r0, [r2, r3]
	} while (--width > 0);
     21a:	3301      	adds	r3, #1
     21c:	b2d8      	uxtb	r0, r3
     21e:	4284      	cmp	r4, r0
     220:	d1f9      	bne.n	216 <framebuffer_put_page+0x12>
}
     222:	bd30      	pop	{r4, r5, pc}

00000224 <framebuffer_put_byte>:
/**
 * \brief Put a byte to the buffer in RAM
 */
void framebuffer_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                          const uint8_t data)
{
     224:	b510      	push	{r4, lr}
	const struct framebuffer *disp = (const struct framebuffer *)me;

	*(disp->fbpointer + (page * disp->parent.width) + column) = data;
     226:	7904      	ldrb	r4, [r0, #4]
     228:	68c0      	ldr	r0, [r0, #12]
     22a:	4361      	muls	r1, r4
     22c:	1880      	adds	r0, r0, r2
     22e:	5443      	strb	r3, [r0, r1]
}
     230:	bd10      	pop	{r4, pc}

00000232 <framebuffer_get_byte>:
 */
uint8_t framebuffer_get_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column)
{
	const struct framebuffer *disp = (const struct framebuffer *)me;

	return *(disp->fbpointer + (page * disp->parent.width) + column);
     232:	7903      	ldrb	r3, [r0, #4]
     234:	4359      	muls	r1, r3
     236:	68c3      	ldr	r3, [r0, #12]
     238:	189b      	adds	r3, r3, r2
     23a:	5c58      	ldrb	r0, [r3, r1]
}
     23c:	4770      	bx	lr
	...

00000240 <framebuffer_draw_pixel>:
{
     240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	display_mono_draw_pixel(&disp->parent, x, y, color, disp->parent.width, disp->parent.height, 8);
     242:	2408      	movs	r4, #8
     244:	9402      	str	r4, [sp, #8]
     246:	7944      	ldrb	r4, [r0, #5]
     248:	9401      	str	r4, [sp, #4]
     24a:	7904      	ldrb	r4, [r0, #4]
     24c:	9400      	str	r4, [sp, #0]
     24e:	4c01      	ldr	r4, [pc, #4]	; (254 <framebuffer_draw_pixel+0x14>)
     250:	47a0      	blx	r4
}
     252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     254:	00000301 	.word	0x00000301

00000258 <framebuffer_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the buffer in RAM
 */
void framebuffer_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
     258:	b513      	push	{r0, r1, r4, lr}
     25a:	ac04      	add	r4, sp, #16
     25c:	7824      	ldrb	r4, [r4, #0]
	const struct framebuffer *disp = (const struct framebuffer *)me;

	display_mono_mask_byte(&disp->parent, page, column, pixel_mask, color);
     25e:	9400      	str	r4, [sp, #0]
     260:	4c01      	ldr	r4, [pc, #4]	; (268 <framebuffer_mask_byte+0x10>)
     262:	47a0      	blx	r4
}
     264:	bd13      	pop	{r0, r1, r4, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	000002bf 	.word	0x000002bf

0000026c <framebuffer_construct>:
{
     26c:	b573      	push	{r0, r1, r4, r5, r6, lr}
     26e:	0004      	movs	r4, r0
     270:	000d      	movs	r5, r1
	display_mono_construct(&display->parent, NULL, width, height, &framebuffer_interface);
     272:	4904      	ldr	r1, [pc, #16]	; (284 <framebuffer_construct+0x18>)
     274:	4e04      	ldr	r6, [pc, #16]	; (288 <framebuffer_construct+0x1c>)
     276:	9100      	str	r1, [sp, #0]
     278:	2100      	movs	r1, #0
     27a:	47b0      	blx	r6
}
     27c:	0020      	movs	r0, r4
	display->fbpointer = framebuffer;
     27e:	60e5      	str	r5, [r4, #12]
}
     280:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	20000014 	.word	0x20000014
     288:	0000028d 	.word	0x0000028d

0000028c <display_mono_construct>:
                                            const gfx_coord_t width, const gfx_coord_t height,
                                            struct display_mono_interface *const interface)
{
	me->dc        = dc;
	me->width     = width;
	me->height    = height;
     28c:	7143      	strb	r3, [r0, #5]
	me->interface = interface;
     28e:	9b00      	ldr	r3, [sp, #0]
	me->dc        = dc;
     290:	6001      	str	r1, [r0, #0]
	me->width     = width;
     292:	7102      	strb	r2, [r0, #4]
	me->interface = interface;
     294:	6083      	str	r3, [r0, #8]

	return me;
}
     296:	4770      	bx	lr

00000298 <display_mono_put_byte>:
/**
 * \brief Put a byte to the display controller RAM
 */
void display_mono_put_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                           const uint8_t data)
{
     298:	b570      	push	{r4, r5, r6, lr}
     29a:	0004      	movs	r4, r0
     29c:	0016      	movs	r6, r2
     29e:	001d      	movs	r5, r3
	me->dc->interface->set_page_address(me->dc, page);
     2a0:	6800      	ldr	r0, [r0, #0]
     2a2:	6843      	ldr	r3, [r0, #4]
     2a4:	689b      	ldr	r3, [r3, #8]
     2a6:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, column);
     2a8:	6820      	ldr	r0, [r4, #0]
     2aa:	0031      	movs	r1, r6
     2ac:	6843      	ldr	r3, [r0, #4]
     2ae:	68db      	ldr	r3, [r3, #12]
     2b0:	4798      	blx	r3
	me->dc->interface->write_data(me->dc, data);
     2b2:	6820      	ldr	r0, [r4, #0]
     2b4:	0029      	movs	r1, r5
     2b6:	6843      	ldr	r3, [r0, #4]
     2b8:	681b      	ldr	r3, [r3, #0]
     2ba:	4798      	blx	r3
}
     2bc:	bd70      	pop	{r4, r5, r6, pc}

000002be <display_mono_mask_byte>:
/**
 * \brief Read/Modify/Write a byte on the display controller
 */
void display_mono_mask_byte(const struct display_mono *const me, const gfx_coord_t page, const gfx_coord_t column,
                            const enum gfx_mono_color pixel_mask, const enum gfx_mono_color color)
{
     2be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2c0:	9301      	str	r3, [sp, #4]
     2c2:	ab08      	add	r3, sp, #32
     2c4:	781f      	ldrb	r7, [r3, #0]
	uint8_t temp = me->interface->get_byte(me, page, column);
     2c6:	6883      	ldr	r3, [r0, #8]
{
     2c8:	0004      	movs	r4, r0
	uint8_t temp = me->interface->get_byte(me, page, column);
     2ca:	681b      	ldr	r3, [r3, #0]
{
     2cc:	000d      	movs	r5, r1
     2ce:	0016      	movs	r6, r2
	uint8_t temp = me->interface->get_byte(me, page, column);
     2d0:	4798      	blx	r3
     2d2:	0003      	movs	r3, r0

	switch (color) {
     2d4:	2f01      	cmp	r7, #1
     2d6:	d006      	beq.n	2e6 <display_mono_mask_byte+0x28>
     2d8:	2f02      	cmp	r7, #2
     2da:	d00e      	beq.n	2fa <display_mono_mask_byte+0x3c>
     2dc:	2f00      	cmp	r7, #0
     2de:	d105      	bne.n	2ec <display_mono_mask_byte+0x2e>
	case GFX_PIXEL_SET:
		temp |= (uint8_t)pixel_mask;
		break;

	case GFX_PIXEL_CLR:
		temp &= ~(uint8_t)pixel_mask;
     2e0:	9a01      	ldr	r2, [sp, #4]
     2e2:	4393      	bics	r3, r2
     2e4:	e001      	b.n	2ea <display_mono_mask_byte+0x2c>
		temp |= (uint8_t)pixel_mask;
     2e6:	9a01      	ldr	r2, [sp, #4]
     2e8:	4313      	orrs	r3, r2
		break;

	case GFX_PIXEL_XOR:
		temp ^= (uint8_t)pixel_mask;
     2ea:	b2db      	uxtb	r3, r3

	default:
		break;
	}

	me->interface->put_byte(me, page, column, temp);
     2ec:	68a2      	ldr	r2, [r4, #8]
     2ee:	0029      	movs	r1, r5
     2f0:	6857      	ldr	r7, [r2, #4]
     2f2:	0020      	movs	r0, r4
     2f4:	0032      	movs	r2, r6
     2f6:	47b8      	blx	r7
}
     2f8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		temp ^= (uint8_t)pixel_mask;
     2fa:	9a01      	ldr	r2, [sp, #4]
     2fc:	4053      	eors	r3, r2
     2fe:	e7f4      	b.n	2ea <display_mono_mask_byte+0x2c>

00000300 <display_mono_draw_pixel>:
 * \brief Draw pixel to screen
 */
void display_mono_draw_pixel(const struct display_mono *const me, const gfx_coord_t x, const gfx_coord_t y,
                             const enum gfx_mono_color color, const gfx_coord_t width, const gfx_coord_t height,
                             const uint8_t pixels)
{
     300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     302:	9300      	str	r3, [sp, #0]
     304:	ab08      	add	r3, sp, #32
     306:	0014      	movs	r4, r2
     308:	781a      	ldrb	r2, [r3, #0]
     30a:	000f      	movs	r7, r1
     30c:	ab09      	add	r3, sp, #36	; 0x24
     30e:	a90a      	add	r1, sp, #40	; 0x28
     310:	0005      	movs	r5, r0
     312:	781b      	ldrb	r3, [r3, #0]
     314:	7809      	ldrb	r1, [r1, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > width - 1) || (y > height - 1)) {
     316:	42ba      	cmp	r2, r7
     318:	d921      	bls.n	35e <display_mono_draw_pixel+0x5e>
     31a:	42a3      	cmp	r3, r4
     31c:	d91f      	bls.n	35e <display_mono_draw_pixel+0x5e>
		return;
	}

	page       = y / pixels;
     31e:	4b14      	ldr	r3, [pc, #80]	; (370 <display_mono_draw_pixel+0x70>)
     320:	0020      	movs	r0, r4
     322:	4798      	blx	r3
     324:	b2c6      	uxtb	r6, r0
	pixel_mask = (1 << (y - (page * 8)));
     326:	00f2      	lsls	r2, r6, #3
     328:	1aa2      	subs	r2, r4, r2
     32a:	2401      	movs	r4, #1
     32c:	4094      	lsls	r4, r2
     32e:	b2e3      	uxtb	r3, r4
     330:	9301      	str	r3, [sp, #4]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = me->interface->get_byte(me, page, x);
     332:	68ab      	ldr	r3, [r5, #8]
     334:	003a      	movs	r2, r7
     336:	681b      	ldr	r3, [r3, #0]
     338:	0031      	movs	r1, r6
     33a:	0028      	movs	r0, r5
     33c:	4798      	blx	r3

	switch (color) {
     33e:	9a00      	ldr	r2, [sp, #0]
	pixel_value = me->interface->get_byte(me, page, x);
     340:	0003      	movs	r3, r0
	switch (color) {
     342:	2a01      	cmp	r2, #1
     344:	d00c      	beq.n	360 <display_mono_draw_pixel+0x60>
     346:	2a02      	cmp	r2, #2
     348:	d00e      	beq.n	368 <display_mono_draw_pixel+0x68>
     34a:	2a00      	cmp	r2, #0
     34c:	d101      	bne.n	352 <display_mono_draw_pixel+0x52>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
		break;

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     34e:	43a3      	bics	r3, r4
		break;

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     350:	b2db      	uxtb	r3, r3

	default:
		break;
	}

	me->interface->put_byte(me, page, x, pixel_value);
     352:	68aa      	ldr	r2, [r5, #8]
     354:	0031      	movs	r1, r6
     356:	6854      	ldr	r4, [r2, #4]
     358:	0028      	movs	r0, r5
     35a:	003a      	movs	r2, r7
     35c:	47a0      	blx	r4
}
     35e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pixel_value |= pixel_mask;
     360:	9a01      	ldr	r2, [sp, #4]
     362:	4302      	orrs	r2, r0
		pixel_value ^= pixel_mask;
     364:	0013      	movs	r3, r2
     366:	e7f3      	b.n	350 <display_mono_draw_pixel+0x50>
     368:	9a01      	ldr	r2, [sp, #4]
     36a:	4042      	eors	r2, r0
     36c:	e7fa      	b.n	364 <display_mono_draw_pixel+0x64>
     36e:	46c0      	nop			; (mov r8, r8)
     370:	00001389 	.word	0x00001389

00000374 <display_mono_put_page>:
/**
 * \brief Put a page from RAM to the display controller.
 */
void display_mono_put_page(const struct display_mono *const me, const enum gfx_mono_color *data, const gfx_coord_t page,
                           const gfx_coord_t page_offset, gfx_coord_t width)
{
     374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     376:	0006      	movs	r6, r0
     378:	001f      	movs	r7, r3
	me->dc->interface->set_page_address(me->dc, page);
     37a:	6800      	ldr	r0, [r0, #0]
{
     37c:	ab06      	add	r3, sp, #24
     37e:	781d      	ldrb	r5, [r3, #0]
	me->dc->interface->set_page_address(me->dc, page);
     380:	6843      	ldr	r3, [r0, #4]
{
     382:	000c      	movs	r4, r1
	me->dc->interface->set_page_address(me->dc, page);
     384:	689b      	ldr	r3, [r3, #8]
{
     386:	0011      	movs	r1, r2
	me->dc->interface->set_page_address(me->dc, page);
     388:	4798      	blx	r3
	me->dc->interface->set_column_address(me->dc, page_offset);
     38a:	6830      	ldr	r0, [r6, #0]
     38c:	0039      	movs	r1, r7
     38e:	6843      	ldr	r3, [r0, #4]

	do {
		me->dc->interface->write_data(me->dc, *data++);
	} while (--width);
     390:	1965      	adds	r5, r4, r5
	me->dc->interface->set_column_address(me->dc, page_offset);
     392:	68db      	ldr	r3, [r3, #12]
     394:	4798      	blx	r3
	} while (--width);
     396:	b2ed      	uxtb	r5, r5
		me->dc->interface->write_data(me->dc, *data++);
     398:	6830      	ldr	r0, [r6, #0]
     39a:	7821      	ldrb	r1, [r4, #0]
     39c:	6843      	ldr	r3, [r0, #4]
	} while (--width);
     39e:	3401      	adds	r4, #1
		me->dc->interface->write_data(me->dc, *data++);
     3a0:	681b      	ldr	r3, [r3, #0]
     3a2:	4798      	blx	r3
	} while (--width);
     3a4:	b2e3      	uxtb	r3, r4
     3a6:	429d      	cmp	r5, r3
     3a8:	d1f6      	bne.n	398 <display_mono_put_page+0x24>
}
     3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000003ac <display_mono_init>:

/**
 * \brief Initialize abstract display controller and abstract display.
 */
void display_mono_init(const struct display_mono *const me, const gfx_coord_t width, const uint8_t pages)
{
     3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ae:	0004      	movs	r4, r0
	uint8_t page = 0;

	if (me->dc) {
     3b0:	6800      	ldr	r0, [r0, #0]
{
     3b2:	b085      	sub	sp, #20
     3b4:	9102      	str	r1, [sp, #8]
     3b6:	9203      	str	r2, [sp, #12]
	if (me->dc) {
     3b8:	2800      	cmp	r0, #0
     3ba:	d003      	beq.n	3c4 <display_mono_init+0x18>
		me->dc->interface->set_start_line_address(me->dc, 0);
     3bc:	6843      	ldr	r3, [r0, #4]
     3be:	2100      	movs	r1, #0
     3c0:	691b      	ldr	r3, [r3, #16]
     3c2:	4798      	blx	r3
	}
	for (; page < pages; page++) {
     3c4:	2600      	movs	r6, #0
     3c6:	b2f3      	uxtb	r3, r6
     3c8:	9301      	str	r3, [sp, #4]
     3ca:	9b03      	ldr	r3, [sp, #12]
     3cc:	429e      	cmp	r6, r3
     3ce:	d00f      	beq.n	3f0 <display_mono_init+0x44>
     3d0:	2500      	movs	r5, #0
     3d2:	e007      	b.n	3e4 <display_mono_init+0x38>
		uint8_t column = 0;

		for (; column < width; column++) {
			me->interface->put_byte(me, page, column, 0x00);
     3d4:	68a3      	ldr	r3, [r4, #8]
     3d6:	0020      	movs	r0, r4
     3d8:	685b      	ldr	r3, [r3, #4]
     3da:	9901      	ldr	r1, [sp, #4]
     3dc:	001f      	movs	r7, r3
     3de:	2300      	movs	r3, #0
     3e0:	47b8      	blx	r7
		for (; column < width; column++) {
     3e2:	3501      	adds	r5, #1
     3e4:	9b02      	ldr	r3, [sp, #8]
     3e6:	b2ea      	uxtb	r2, r5
     3e8:	429d      	cmp	r5, r3
     3ea:	d1f3      	bne.n	3d4 <display_mono_init+0x28>
	for (; page < pages; page++) {
     3ec:	3601      	adds	r6, #1
     3ee:	e7ea      	b.n	3c6 <display_mono_init+0x1a>
		}
	}
}
     3f0:	b005      	add	sp, #20
     3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000003f4 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
     3f4:	e7fe      	b.n	3f4 <Dummy_Handler>
	...

000003f8 <Reset_Handler>:
	if (pSrc != pDest) {
     3f8:	4925      	ldr	r1, [pc, #148]	; (490 <Reset_Handler+0x98>)
     3fa:	4826      	ldr	r0, [pc, #152]	; (494 <Reset_Handler+0x9c>)
{
     3fc:	b570      	push	{r4, r5, r6, lr}
	if (pSrc != pDest) {
     3fe:	4281      	cmp	r1, r0
     400:	d00a      	beq.n	418 <Reset_Handler+0x20>
			*pDest++ = *pSrc++;
     402:	4b25      	ldr	r3, [pc, #148]	; (498 <Reset_Handler+0xa0>)
     404:	1ec4      	subs	r4, r0, #3
     406:	2200      	movs	r2, #0
     408:	42a3      	cmp	r3, r4
     40a:	d303      	bcc.n	414 <Reset_Handler+0x1c>
     40c:	3303      	adds	r3, #3
     40e:	1a1a      	subs	r2, r3, r0
     410:	0892      	lsrs	r2, r2, #2
     412:	0092      	lsls	r2, r2, #2
     414:	4b21      	ldr	r3, [pc, #132]	; (49c <Reset_Handler+0xa4>)
     416:	4798      	blx	r3
		*pDest++ = 0;
     418:	4821      	ldr	r0, [pc, #132]	; (4a0 <Reset_Handler+0xa8>)
     41a:	4b22      	ldr	r3, [pc, #136]	; (4a4 <Reset_Handler+0xac>)
     41c:	1ec1      	subs	r1, r0, #3
     41e:	2200      	movs	r2, #0
     420:	4299      	cmp	r1, r3
     422:	d803      	bhi.n	42c <Reset_Handler+0x34>
     424:	3303      	adds	r3, #3
     426:	1a1a      	subs	r2, r3, r0
     428:	0892      	lsrs	r2, r2, #2
     42a:	0092      	lsls	r2, r2, #2
     42c:	2100      	movs	r1, #0
     42e:	4b1e      	ldr	r3, [pc, #120]	; (4a8 <Reset_Handler+0xb0>)
     430:	4798      	blx	r3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
     432:	22ff      	movs	r2, #255	; 0xff
     434:	4b1d      	ldr	r3, [pc, #116]	; (4ac <Reset_Handler+0xb4>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     436:	2103      	movs	r1, #3
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
     438:	4393      	bics	r3, r2
     43a:	4a1d      	ldr	r2, [pc, #116]	; (4b0 <Reset_Handler+0xb8>)
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     43c:	250c      	movs	r5, #12
	SCB->VTOR = ((uint32_t)pSrc & SCB_VTOR_TBLOFF_Msk);
     43e:	6093      	str	r3, [r2, #8]
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     440:	2202      	movs	r2, #2
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     442:	2408      	movs	r4, #8
	DMAC->QOSCTRL.bit.DQOS   = 2;
     444:	2630      	movs	r6, #48	; 0x30
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     446:	4b1b      	ldr	r3, [pc, #108]	; (4b4 <Reset_Handler+0xbc>)
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     448:	481b      	ldr	r0, [pc, #108]	; (4b8 <Reset_Handler+0xc0>)
	SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     44a:	625a      	str	r2, [r3, #36]	; 0x24
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     44c:	78c3      	ldrb	r3, [r0, #3]
     44e:	438b      	bics	r3, r1
     450:	4313      	orrs	r3, r2
     452:	70c3      	strb	r3, [r0, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     454:	78c3      	ldrb	r3, [r0, #3]
     456:	43ab      	bics	r3, r5
     458:	4323      	orrs	r3, r4
     45a:	70c3      	strb	r3, [r0, #3]
	DMAC->QOSCTRL.bit.DQOS   = 2;
     45c:	4b17      	ldr	r3, [pc, #92]	; (4bc <Reset_Handler+0xc4>)
     45e:	7b98      	ldrb	r0, [r3, #14]
     460:	43b0      	bics	r0, r6
     462:	0006      	movs	r6, r0
     464:	2020      	movs	r0, #32
     466:	4330      	orrs	r0, r6
     468:	7398      	strb	r0, [r3, #14]
	DMAC->QOSCTRL.bit.FQOS   = 2;
     46a:	7b98      	ldrb	r0, [r3, #14]
     46c:	43a8      	bics	r0, r5
     46e:	4304      	orrs	r4, r0
     470:	739c      	strb	r4, [r3, #14]
	DMAC->QOSCTRL.bit.WRBQOS = 2;
     472:	7b98      	ldrb	r0, [r3, #14]
     474:	4388      	bics	r0, r1
     476:	4302      	orrs	r2, r0
     478:	739a      	strb	r2, [r3, #14]
	NVMCTRL->CTRLB.bit.MANW = 1;
     47a:	2380      	movs	r3, #128	; 0x80
     47c:	4a10      	ldr	r2, [pc, #64]	; (4c0 <Reset_Handler+0xc8>)
     47e:	6851      	ldr	r1, [r2, #4]
     480:	430b      	orrs	r3, r1
     482:	6053      	str	r3, [r2, #4]
	__libc_init_array();
     484:	4b0f      	ldr	r3, [pc, #60]	; (4c4 <Reset_Handler+0xcc>)
     486:	4798      	blx	r3
	main();
     488:	4b0f      	ldr	r3, [pc, #60]	; (4c8 <Reset_Handler+0xd0>)
     48a:	4798      	blx	r3
	while (1)
     48c:	e7fe      	b.n	48c <Reset_Handler+0x94>
     48e:	46c0      	nop			; (mov r8, r8)
     490:	00001868 	.word	0x00001868
     494:	20000000 	.word	0x20000000
     498:	2000004c 	.word	0x2000004c
     49c:	000014e9 	.word	0x000014e9
     4a0:	2000004c 	.word	0x2000004c
     4a4:	200002b4 	.word	0x200002b4
     4a8:	000014fb 	.word	0x000014fb
     4ac:	00000000 	.word	0x00000000
     4b0:	e000ed00 	.word	0xe000ed00
     4b4:	410070fc 	.word	0x410070fc
     4b8:	41005000 	.word	0x41005000
     4bc:	41004800 	.word	0x41004800
     4c0:	41004000 	.word	0x41004000
     4c4:	000014a1 	.word	0x000014a1
     4c8:	00000b55 	.word	0x00000b55

000004cc <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     4cc:	4b0e      	ldr	r3, [pc, #56]	; (508 <_sysctrl_init_sources+0x3c>)
     4ce:	6a18      	ldr	r0, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
     4d0:	6a19      	ldr	r1, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     4d2:	0f89      	lsrs	r1, r1, #30
     4d4:	078a      	lsls	r2, r1, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
     4d6:	490d      	ldr	r1, [pc, #52]	; (50c <_sysctrl_init_sources+0x40>)
     4d8:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
     4da:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
     4dc:	490c      	ldr	r1, [pc, #48]	; (510 <_sysctrl_init_sources+0x44>)
     4de:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
     4e0:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     4e2:	2202      	movs	r2, #2
     4e4:	6999      	ldr	r1, [r3, #24]
     4e6:	430a      	orrs	r2, r1
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     4e8:	211f      	movs	r1, #31
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     4ea:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
     4ec:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
     4ee:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
     4f0:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) >> SYSCTRL_PCLKSR_OSC32KRDY_Pos;
}

static inline bool hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(const void *const hw)
{
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
     4f2:	391e      	subs	r1, #30
     4f4:	68da      	ldr	r2, [r3, #12]
     4f6:	08d2      	lsrs	r2, r2, #3
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
     4f8:	420a      	tst	r2, r1
     4fa:	d0fb      	beq.n	4f4 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
     4fc:	2280      	movs	r2, #128	; 0x80
     4fe:	6a19      	ldr	r1, [r3, #32]
     500:	430a      	orrs	r2, r1
     502:	621a      	str	r2, [r3, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
     504:	4770      	bx	lr
     506:	46c0      	nop			; (mov r8, r8)
     508:	40000800 	.word	0x40000800
     50c:	0fff0000 	.word	0x0fff0000
     510:	00000302 	.word	0x00000302

00000514 <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
     514:	2102      	movs	r1, #2
     516:	4a02      	ldr	r2, [pc, #8]	; (520 <_sysctrl_init_referenced_generators+0xc>)
     518:	6993      	ldr	r3, [r2, #24]
     51a:	438b      	bics	r3, r1
     51c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
     51e:	4770      	bx	lr
     520:	40000800 	.word	0x40000800

00000524 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     524:	b570      	push	{r4, r5, r6, lr}
     526:	0004      	movs	r4, r0
     528:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     52a:	2800      	cmp	r0, #0
     52c:	d002      	beq.n	534 <spi_m_sync_init+0x10>
     52e:	0008      	movs	r0, r1
     530:	1e43      	subs	r3, r0, #1
     532:	4198      	sbcs	r0, r3
     534:	4909      	ldr	r1, [pc, #36]	; (55c <spi_m_sync_init+0x38>)
     536:	4b0a      	ldr	r3, [pc, #40]	; (560 <spi_m_sync_init+0x3c>)
     538:	2240      	movs	r2, #64	; 0x40
     53a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
	rc            = _spi_m_sync_init(&spi->dev, hw);
     53c:	0029      	movs	r1, r5
     53e:	4b09      	ldr	r3, [pc, #36]	; (564 <spi_m_sync_init+0x40>)
	spi->dev.prvt = (void *)hw;
     540:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     542:	1d20      	adds	r0, r4, #4
     544:	4798      	blx	r3

	if (rc < 0) {
     546:	2800      	cmp	r0, #0
     548:	db06      	blt.n	558 <spi_m_sync_init+0x34>

	spi->flags    = SPI_DEACTIVATE_NEXT;
	spi->io.read  = _spi_m_sync_io_read;
	spi->io.write = _spi_m_sync_io_write;

	return ERR_NONE;
     54a:	2000      	movs	r0, #0
	spi->flags    = SPI_DEACTIVATE_NEXT;
     54c:	4b06      	ldr	r3, [pc, #24]	; (568 <spi_m_sync_init+0x44>)
     54e:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     550:	4b06      	ldr	r3, [pc, #24]	; (56c <spi_m_sync_init+0x48>)
     552:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     554:	4b06      	ldr	r3, [pc, #24]	; (570 <spi_m_sync_init+0x4c>)
     556:	60e3      	str	r3, [r4, #12]
}
     558:	bd70      	pop	{r4, r5, r6, pc}
     55a:	46c0      	nop			; (mov r8, r8)
     55c:	0000150a 	.word	0x0000150a
     560:	00000ad7 	.word	0x00000ad7
     564:	00001089 	.word	0x00001089
     568:	ffff8000 	.word	0xffff8000
     56c:	00000615 	.word	0x00000615
     570:	000005dd 	.word	0x000005dd

00000574 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     574:	b510      	push	{r4, lr}
     576:	0004      	movs	r4, r0
	ASSERT(spi);
     578:	1e43      	subs	r3, r0, #1
     57a:	4198      	sbcs	r0, r3
     57c:	2257      	movs	r2, #87	; 0x57
     57e:	4904      	ldr	r1, [pc, #16]	; (590 <spi_m_sync_enable+0x1c>)
     580:	4b04      	ldr	r3, [pc, #16]	; (594 <spi_m_sync_enable+0x20>)
     582:	b2c0      	uxtb	r0, r0
     584:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     586:	4b04      	ldr	r3, [pc, #16]	; (598 <spi_m_sync_enable+0x24>)
     588:	1d20      	adds	r0, r4, #4
     58a:	4798      	blx	r3
}
     58c:	bd10      	pop	{r4, pc}
     58e:	46c0      	nop			; (mov r8, r8)
     590:	0000150a 	.word	0x0000150a
     594:	00000ad7 	.word	0x00000ad7
     598:	00001219 	.word	0x00001219

0000059c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     59c:	b530      	push	{r4, r5, lr}
     59e:	0004      	movs	r4, r0
     5a0:	000d      	movs	r5, r1
     5a2:	b087      	sub	sp, #28
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     5a4:	2800      	cmp	r0, #0
     5a6:	d002      	beq.n	5ae <spi_m_sync_transfer+0x12>
     5a8:	0008      	movs	r0, r1
     5aa:	1e43      	subs	r3, r0, #1
     5ac:	4198      	sbcs	r0, r3
     5ae:	22b3      	movs	r2, #179	; 0xb3
     5b0:	4907      	ldr	r1, [pc, #28]	; (5d0 <spi_m_sync_transfer+0x34>)
     5b2:	4b08      	ldr	r3, [pc, #32]	; (5d4 <spi_m_sync_transfer+0x38>)
     5b4:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     5b6:	682b      	ldr	r3, [r5, #0]
	msg.rxbuf = p_xfer->rxbuf;
	msg.size  = p_xfer->size;
	return _spi_m_sync_trans(&spi->dev, &msg);
     5b8:	1d20      	adds	r0, r4, #4
	msg.txbuf = p_xfer->txbuf;
     5ba:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     5bc:	686b      	ldr	r3, [r5, #4]
	return _spi_m_sync_trans(&spi->dev, &msg);
     5be:	a903      	add	r1, sp, #12
	msg.rxbuf = p_xfer->rxbuf;
     5c0:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     5c2:	68ab      	ldr	r3, [r5, #8]
     5c4:	9301      	str	r3, [sp, #4]
     5c6:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     5c8:	4b03      	ldr	r3, [pc, #12]	; (5d8 <spi_m_sync_transfer+0x3c>)
     5ca:	4798      	blx	r3
}
     5cc:	b007      	add	sp, #28
     5ce:	bd30      	pop	{r4, r5, pc}
     5d0:	0000150a 	.word	0x0000150a
     5d4:	00000ad7 	.word	0x00000ad7
     5d8:	00001245 	.word	0x00001245

000005dc <_spi_m_sync_io_write>:
{
     5dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     5de:	0004      	movs	r4, r0
	ASSERT(io);
     5e0:	1e43      	subs	r3, r0, #1
     5e2:	4198      	sbcs	r0, r3
{
     5e4:	000e      	movs	r6, r1
     5e6:	0015      	movs	r5, r2
	ASSERT(io);
     5e8:	4907      	ldr	r1, [pc, #28]	; (608 <_spi_m_sync_io_write+0x2c>)
     5ea:	22a3      	movs	r2, #163	; 0xa3
     5ec:	4b07      	ldr	r3, [pc, #28]	; (60c <_spi_m_sync_io_write+0x30>)
     5ee:	b2c0      	uxtb	r0, r0
     5f0:	4798      	blx	r3
	xfer.rxbuf = 0;
     5f2:	2300      	movs	r3, #0
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5f4:	0020      	movs	r0, r4
	xfer.rxbuf = 0;
     5f6:	9302      	str	r3, [sp, #8]
	return spi_m_sync_transfer(spi, &xfer);
     5f8:	a901      	add	r1, sp, #4
     5fa:	4b05      	ldr	r3, [pc, #20]	; (610 <_spi_m_sync_io_write+0x34>)
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     5fc:	380c      	subs	r0, #12
	xfer.txbuf = (uint8_t *)buf;
     5fe:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     600:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     602:	4798      	blx	r3
}
     604:	b004      	add	sp, #16
     606:	bd70      	pop	{r4, r5, r6, pc}
     608:	0000150a 	.word	0x0000150a
     60c:	00000ad7 	.word	0x00000ad7
     610:	0000059d 	.word	0x0000059d

00000614 <_spi_m_sync_io_read>:
{
     614:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     616:	0004      	movs	r4, r0
	ASSERT(io);
     618:	1e43      	subs	r3, r0, #1
     61a:	4198      	sbcs	r0, r3
{
     61c:	000e      	movs	r6, r1
     61e:	0015      	movs	r5, r2
	ASSERT(io);
     620:	4907      	ldr	r1, [pc, #28]	; (640 <_spi_m_sync_io_read+0x2c>)
     622:	2287      	movs	r2, #135	; 0x87
     624:	4b07      	ldr	r3, [pc, #28]	; (644 <_spi_m_sync_io_read+0x30>)
     626:	b2c0      	uxtb	r0, r0
     628:	4798      	blx	r3
	xfer.txbuf = 0;
     62a:	2300      	movs	r3, #0
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     62c:	0020      	movs	r0, r4
	xfer.txbuf = 0;
     62e:	9301      	str	r3, [sp, #4]
	return spi_m_sync_transfer(spi, &xfer);
     630:	a901      	add	r1, sp, #4
     632:	4b05      	ldr	r3, [pc, #20]	; (648 <_spi_m_sync_io_read+0x34>)
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     634:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     636:	9602      	str	r6, [sp, #8]
	xfer.size  = length;
     638:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     63a:	4798      	blx	r3
}
     63c:	b004      	add	sp, #16
     63e:	bd70      	pop	{r4, r5, r6, pc}
     640:	0000150a 	.word	0x0000150a
     644:	00000ad7 	.word	0x00000ad7
     648:	0000059d 	.word	0x0000059d

0000064c <gfx_mono_text_construct>:
/**
 * \brief Construct GFX mono text
 */
struct gfx_mono_text *gfx_mono_text_construct(struct gfx_mono_text *const me, struct gfx_mono *const gfx)
{
	me->gfx = gfx;
     64c:	6001      	str	r1, [r0, #0]

	return me;
}
     64e:	4770      	bx	lr

00000650 <gfx_mono_text_draw_char>:
/**
 * \brief Draws a character to the display
 */
void gfx_mono_text_draw_char(const struct gfx_mono_text *const me, const uint8_t c, const gfx_coord_t x,
                             const gfx_coord_t y, const struct font *font)
{
     650:	b5f0      	push	{r4, r5, r6, r7, lr}
	gfx_mono_draw_filled_rect(me->gfx, x, y, font->width, font->height, GFX_PIXEL_CLR);
     652:	2600      	movs	r6, #0
{
     654:	b08b      	sub	sp, #44	; 0x2c
     656:	9d10      	ldr	r5, [sp, #64]	; 0x40
     658:	9005      	str	r0, [sp, #20]
     65a:	9206      	str	r2, [sp, #24]
     65c:	9307      	str	r3, [sp, #28]
	gfx_mono_draw_filled_rect(me->gfx, x, y, font->width, font->height, GFX_PIXEL_CLR);
     65e:	7a2b      	ldrb	r3, [r5, #8]
     660:	9601      	str	r6, [sp, #4]
     662:	7a6a      	ldrb	r2, [r5, #9]
{
     664:	000c      	movs	r4, r1
	gfx_mono_draw_filled_rect(me->gfx, x, y, font->width, font->height, GFX_PIXEL_CLR);
     666:	9200      	str	r2, [sp, #0]
     668:	9906      	ldr	r1, [sp, #24]
     66a:	9a07      	ldr	r2, [sp, #28]
     66c:	6800      	ldr	r0, [r0, #0]
     66e:	4f29      	ldr	r7, [pc, #164]	; (714 <gfx_mono_text_draw_char+0xc4>)
     670:	47b8      	blx	r7

	switch (font->type) {
     672:	782b      	ldrb	r3, [r5, #0]
     674:	4928      	ldr	r1, [pc, #160]	; (718 <gfx_mono_text_draw_char+0xc8>)
     676:	42b3      	cmp	r3, r6
     678:	d146      	bne.n	708 <gfx_mono_text_draw_char+0xb8>
	uint8_t               i;
	gfx_coord_t           inc_x = x;
	gfx_coord_t           inc_y = y;

	/* Sanity check on parameters, assert if font is NULL. */
	ASSERT(font != NULL);
     67a:	4b28      	ldr	r3, [pc, #160]	; (71c <gfx_mono_text_draw_char+0xcc>)
     67c:	22f5      	movs	r2, #245	; 0xf5
     67e:	2001      	movs	r0, #1
     680:	4798      	blx	r3

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     682:	7a2b      	ldrb	r3, [r5, #8]
     684:	08d9      	lsrs	r1, r3, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     686:	075b      	lsls	r3, r3, #29
     688:	d000      	beq.n	68c <gfx_mono_text_draw_char+0x3c>
		char_row_size++;
     68a:	3101      	adds	r1, #1
	}

	glyph_data_offset = char_row_size * font->height * ((uint8_t)ch - font->first_char);
     68c:	7a6b      	ldrb	r3, [r5, #9]
     68e:	9303      	str	r3, [sp, #12]
     690:	7aab      	ldrb	r3, [r5, #10]
     692:	1ae4      	subs	r4, r4, r3
     694:	9b03      	ldr	r3, [sp, #12]
     696:	435c      	muls	r4, r3
     698:	434c      	muls	r4, r1
	glyph_data        = font->data.progmem + glyph_data_offset;
     69a:	686b      	ldr	r3, [r5, #4]
     69c:	b2a4      	uxth	r4, r4
     69e:	191b      	adds	r3, r3, r4
     6a0:	9304      	str	r3, [sp, #16]
	rows_left         = font->height;
     6a2:	9b03      	ldr	r3, [sp, #12]
     6a4:	9302      	str	r3, [sp, #8]

	do {
		uint8_t glyph_byte   = 0;
     6a6:	2600      	movs	r6, #0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     6a8:	0034      	movs	r4, r6
     6aa:	9a03      	ldr	r2, [sp, #12]
     6ac:	9b07      	ldr	r3, [sp, #28]
     6ae:	189b      	adds	r3, r3, r2
     6b0:	9a02      	ldr	r2, [sp, #8]
     6b2:	1a9b      	subs	r3, r3, r2
     6b4:	b2db      	uxtb	r3, r3
     6b6:	9309      	str	r3, [sp, #36]	; 0x24
		uint8_t pixelsToDraw = font->width;
     6b8:	7a2b      	ldrb	r3, [r5, #8]
     6ba:	9308      	str	r3, [sp, #32]
		for (i = 0; i < pixelsToDraw; i++) {
     6bc:	9b06      	ldr	r3, [sp, #24]
     6be:	1919      	adds	r1, r3, r4
     6c0:	9b08      	ldr	r3, [sp, #32]
     6c2:	b2c9      	uxtb	r1, r1
     6c4:	42a3      	cmp	r3, r4
     6c6:	d107      	bne.n	6d8 <gfx_mono_text_draw_char+0x88>
			glyph_byte <<= 1;
		}

		inc_y += 1;
		inc_x = x;
		rows_left--;
     6c8:	9f02      	ldr	r7, [sp, #8]
     6ca:	3f01      	subs	r7, #1
     6cc:	b2fb      	uxtb	r3, r7
     6ce:	9302      	str	r3, [sp, #8]
	} while (rows_left > 0);
     6d0:	2b00      	cmp	r3, #0
     6d2:	d1e8      	bne.n	6a6 <gfx_mono_text_draw_char+0x56>
}
     6d4:	b00b      	add	sp, #44	; 0x2c
     6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     6d8:	2307      	movs	r3, #7
     6da:	421c      	tst	r4, r3
     6dc:	d103      	bne.n	6e6 <gfx_mono_text_draw_char+0x96>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     6de:	9b04      	ldr	r3, [sp, #16]
     6e0:	781e      	ldrb	r6, [r3, #0]
				glyph_data++;
     6e2:	3301      	adds	r3, #1
     6e4:	9304      	str	r3, [sp, #16]
			if ((glyph_byte & 0x80)) {
     6e6:	b273      	sxtb	r3, r6
     6e8:	2b00      	cmp	r3, #0
     6ea:	da08      	bge.n	6fe <gfx_mono_text_draw_char+0xae>
				me->gfx->display->interface->draw_pixel(me->gfx->display, inc_x, inc_y, GFX_PIXEL_SET);
     6ec:	9b05      	ldr	r3, [sp, #20]
     6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
     6f0:	681b      	ldr	r3, [r3, #0]
     6f2:	6818      	ldr	r0, [r3, #0]
     6f4:	6883      	ldr	r3, [r0, #8]
     6f6:	68db      	ldr	r3, [r3, #12]
     6f8:	001f      	movs	r7, r3
     6fa:	2301      	movs	r3, #1
     6fc:	47b8      	blx	r7
			glyph_byte <<= 1;
     6fe:	0076      	lsls	r6, r6, #1
		for (i = 0; i < pixelsToDraw; i++) {
     700:	3401      	adds	r4, #1
			glyph_byte <<= 1;
     702:	b2f6      	uxtb	r6, r6
		for (i = 0; i < pixelsToDraw; i++) {
     704:	b2e4      	uxtb	r4, r4
     706:	e7d9      	b.n	6bc <gfx_mono_text_draw_char+0x6c>
		ASSERT(false);
     708:	2244      	movs	r2, #68	; 0x44
     70a:	0030      	movs	r0, r6
     70c:	4b03      	ldr	r3, [pc, #12]	; (71c <gfx_mono_text_draw_char+0xcc>)
     70e:	4798      	blx	r3
}
     710:	e7e0      	b.n	6d4 <gfx_mono_text_draw_char+0x84>
     712:	46c0      	nop			; (mov r8, r8)
     714:	00000985 	.word	0x00000985
     718:	00001526 	.word	0x00001526
     71c:	00000ad7 	.word	0x00000ad7

00000720 <gfx_mono_text_draw_string>:
{
     720:	b5f0      	push	{r4, r5, r6, r7, lr}
     722:	b085      	sub	sp, #20
     724:	9003      	str	r0, [sp, #12]
	ASSERT(str != NULL);
     726:	0008      	movs	r0, r1
{
     728:	001e      	movs	r6, r3
	ASSERT(str != NULL);
     72a:	1e43      	subs	r3, r0, #1
     72c:	4198      	sbcs	r0, r3
     72e:	4f16      	ldr	r7, [pc, #88]	; (788 <gfx_mono_text_draw_string+0x68>)
     730:	4d16      	ldr	r5, [pc, #88]	; (78c <gfx_mono_text_draw_string+0x6c>)
{
     732:	9202      	str	r2, [sp, #8]
	ASSERT(str != NULL);
     734:	b2c0      	uxtb	r0, r0
     736:	2253      	movs	r2, #83	; 0x53
{
     738:	000c      	movs	r4, r1
	ASSERT(str != NULL);
     73a:	0039      	movs	r1, r7
     73c:	47a8      	blx	r5
	ASSERT(font != NULL);
     73e:	980a      	ldr	r0, [sp, #40]	; 0x28
     740:	2254      	movs	r2, #84	; 0x54
     742:	1e43      	subs	r3, r0, #1
     744:	4198      	sbcs	r0, r3
     746:	0039      	movs	r1, r7
     748:	b2c0      	uxtb	r0, r0
     74a:	47a8      	blx	r5
     74c:	9d02      	ldr	r5, [sp, #8]
		if (*str == '\n') {
     74e:	7821      	ldrb	r1, [r4, #0]
     750:	290a      	cmp	r1, #10
     752:	d10b      	bne.n	76c <gfx_mono_text_draw_string+0x4c>
			y += font->height + 1;
     754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			x = start_of_string_position_x;
     756:	9d02      	ldr	r5, [sp, #8]
			y += font->height + 1;
     758:	7a5b      	ldrb	r3, [r3, #9]
     75a:	3301      	adds	r3, #1
     75c:	18f6      	adds	r6, r6, r3
     75e:	b2f6      	uxtb	r6, r6
	} while (*(++str));
     760:	7863      	ldrb	r3, [r4, #1]
     762:	3401      	adds	r4, #1
     764:	2b00      	cmp	r3, #0
     766:	d1f2      	bne.n	74e <gfx_mono_text_draw_string+0x2e>
}
     768:	b005      	add	sp, #20
     76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*str == '\r') {
     76c:	290d      	cmp	r1, #13
     76e:	d0f7      	beq.n	760 <gfx_mono_text_draw_string+0x40>
			gfx_mono_text_draw_char(me, *str, x, y, font);
     770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     772:	002a      	movs	r2, r5
     774:	9300      	str	r3, [sp, #0]
     776:	9803      	ldr	r0, [sp, #12]
     778:	0033      	movs	r3, r6
     77a:	4f05      	ldr	r7, [pc, #20]	; (790 <gfx_mono_text_draw_string+0x70>)
     77c:	47b8      	blx	r7
			x += font->width;
     77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     780:	7a1b      	ldrb	r3, [r3, #8]
     782:	18ed      	adds	r5, r5, r3
     784:	b2ed      	uxtb	r5, r5
     786:	e7eb      	b.n	760 <gfx_mono_text_draw_string+0x40>
     788:	00001526 	.word	0x00001526
     78c:	00000ad7 	.word	0x00000ad7
     790:	00000651 	.word	0x00000651

00000794 <gfx_mono_construct>:
/**
 * \brief Construct GFX mono
 */
struct gfx_mono *gfx_mono_construct(struct gfx_mono *const me, struct display_mono *const d)
{
	me->display = d;
     794:	6001      	str	r1, [r0, #0]

	return me;
}
     796:	4770      	bx	lr

00000798 <gfx_mono_draw_horizontal_line>:
/**
 * \brief Draw a horizontal line, one pixel wide (generic implementation)
 */
void gfx_mono_draw_horizontal_line(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
                                   enum gfx_mono_color color)
{
     798:	b5f0      	push	{r4, r5, r6, r7, lr}
     79a:	001c      	movs	r4, r3
     79c:	b085      	sub	sp, #20
     79e:	ab0a      	add	r3, sp, #40	; 0x28
     7a0:	9101      	str	r1, [sp, #4]
     7a2:	7819      	ldrb	r1, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > me->display->width) {
     7a4:	6803      	ldr	r3, [r0, #0]
{
     7a6:	0005      	movs	r5, r0
	if (x + length > me->display->width) {
     7a8:	9801      	ldr	r0, [sp, #4]
     7aa:	791b      	ldrb	r3, [r3, #4]
     7ac:	1900      	adds	r0, r0, r4
     7ae:	4298      	cmp	r0, r3
     7b0:	dd02      	ble.n	7b8 <gfx_mono_draw_horizontal_line+0x20>
		length = me->display->width - x;
     7b2:	9801      	ldr	r0, [sp, #4]
     7b4:	1a1c      	subs	r4, r3, r0
     7b6:	b2e4      	uxtb	r4, r4
	}

	page      = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
     7b8:	2c00      	cmp	r4, #0
     7ba:	d061      	beq.n	880 <gfx_mono_draw_horizontal_line+0xe8>
	page      = y / 8;
     7bc:	08d7      	lsrs	r7, r2, #3
	pixelmask = (1 << (y - (page * 8)));
     7be:	00fb      	lsls	r3, r7, #3
     7c0:	1ad2      	subs	r2, r2, r3
     7c2:	2301      	movs	r3, #1
     7c4:	4093      	lsls	r3, r2
     7c6:	9302      	str	r3, [sp, #8]
     7c8:	466b      	mov	r3, sp
     7ca:	7a1b      	ldrb	r3, [r3, #8]
     7cc:	9303      	str	r3, [sp, #12]
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
     7ce:	2901      	cmp	r1, #1
     7d0:	d03b      	beq.n	84a <gfx_mono_draw_horizontal_line+0xb2>
     7d2:	2902      	cmp	r1, #2
     7d4:	d01d      	beq.n	812 <gfx_mono_draw_horizontal_line+0x7a>
     7d6:	2900      	cmp	r1, #0
     7d8:	d152      	bne.n	880 <gfx_mono_draw_horizontal_line+0xe8>
     7da:	3c01      	subs	r4, #1
     7dc:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_CLR:
		while (length-- > 0) {
			temp = me->display->interface->get_byte(me->display, page, x + length);
     7de:	9b01      	ldr	r3, [sp, #4]
     7e0:	6828      	ldr	r0, [r5, #0]
     7e2:	191e      	adds	r6, r3, r4
     7e4:	6883      	ldr	r3, [r0, #8]
     7e6:	b2f6      	uxtb	r6, r6
     7e8:	0032      	movs	r2, r6
     7ea:	0039      	movs	r1, r7
     7ec:	681b      	ldr	r3, [r3, #0]
     7ee:	4798      	blx	r3
			temp &= ~pixelmask;
     7f0:	0003      	movs	r3, r0
     7f2:	9a02      	ldr	r2, [sp, #8]
			me->display->interface->put_byte(me->display, page, x + length, temp);
     7f4:	6828      	ldr	r0, [r5, #0]
			temp &= ~pixelmask;
     7f6:	4393      	bics	r3, r2
			me->display->interface->put_byte(me->display, page, x + length, temp);
     7f8:	6882      	ldr	r2, [r0, #8]
     7fa:	3c01      	subs	r4, #1
     7fc:	6852      	ldr	r2, [r2, #4]
     7fe:	0039      	movs	r1, r7
     800:	4694      	mov	ip, r2
     802:	b2db      	uxtb	r3, r3
     804:	0032      	movs	r2, r6
     806:	b2e4      	uxtb	r4, r4
     808:	4666      	mov	r6, ip
     80a:	47b0      	blx	r6
		while (length-- > 0) {
     80c:	2cff      	cmp	r4, #255	; 0xff
     80e:	d1e6      	bne.n	7de <gfx_mono_draw_horizontal_line+0x46>
     810:	e036      	b.n	880 <gfx_mono_draw_horizontal_line+0xe8>
     812:	3c01      	subs	r4, #1
     814:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = me->display->interface->get_byte(me->display, page, x + length);
     816:	9b01      	ldr	r3, [sp, #4]
     818:	6828      	ldr	r0, [r5, #0]
     81a:	191e      	adds	r6, r3, r4
     81c:	6883      	ldr	r3, [r0, #8]
     81e:	b2f6      	uxtb	r6, r6
     820:	0032      	movs	r2, r6
     822:	0039      	movs	r1, r7
     824:	681b      	ldr	r3, [r3, #0]
     826:	4798      	blx	r3
     828:	0003      	movs	r3, r0
			temp ^= pixelmask;
     82a:	9a03      	ldr	r2, [sp, #12]
			me->display->interface->put_byte(me->display, page, x + length, temp);
     82c:	6828      	ldr	r0, [r5, #0]
			temp ^= pixelmask;
     82e:	4053      	eors	r3, r2
			me->display->interface->put_byte(me->display, page, x + length, temp);
     830:	6882      	ldr	r2, [r0, #8]
     832:	3c01      	subs	r4, #1
     834:	6852      	ldr	r2, [r2, #4]
     836:	0039      	movs	r1, r7
     838:	4694      	mov	ip, r2
     83a:	b2db      	uxtb	r3, r3
     83c:	0032      	movs	r2, r6
     83e:	b2e4      	uxtb	r4, r4
     840:	4666      	mov	r6, ip
     842:	47b0      	blx	r6
		while (length-- > 0) {
     844:	2cff      	cmp	r4, #255	; 0xff
     846:	d1e6      	bne.n	816 <gfx_mono_draw_horizontal_line+0x7e>
     848:	e01a      	b.n	880 <gfx_mono_draw_horizontal_line+0xe8>
     84a:	3c01      	subs	r4, #1
     84c:	b2e4      	uxtb	r4, r4
			temp = me->display->interface->get_byte(me->display, page, x + length);
     84e:	9b01      	ldr	r3, [sp, #4]
     850:	6828      	ldr	r0, [r5, #0]
     852:	191e      	adds	r6, r3, r4
     854:	6883      	ldr	r3, [r0, #8]
     856:	b2f6      	uxtb	r6, r6
     858:	0032      	movs	r2, r6
     85a:	0039      	movs	r1, r7
     85c:	681b      	ldr	r3, [r3, #0]
     85e:	4798      	blx	r3
     860:	0003      	movs	r3, r0
			temp |= pixelmask;
     862:	9a03      	ldr	r2, [sp, #12]
			me->display->interface->put_byte(me->display, page, x + length, temp);
     864:	6828      	ldr	r0, [r5, #0]
			temp |= pixelmask;
     866:	4313      	orrs	r3, r2
			me->display->interface->put_byte(me->display, page, x + length, temp);
     868:	6882      	ldr	r2, [r0, #8]
     86a:	3c01      	subs	r4, #1
     86c:	6852      	ldr	r2, [r2, #4]
     86e:	0039      	movs	r1, r7
     870:	4694      	mov	ip, r2
     872:	b2db      	uxtb	r3, r3
     874:	0032      	movs	r2, r6
     876:	b2e4      	uxtb	r4, r4
     878:	4666      	mov	r6, ip
     87a:	47b0      	blx	r6
		while (length-- > 0) {
     87c:	2cff      	cmp	r4, #255	; 0xff
     87e:	d1e6      	bne.n	84e <gfx_mono_draw_horizontal_line+0xb6>
		break;

	default:
		break;
	}
}
     880:	b005      	add	sp, #20
     882:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000884 <gfx_mono_draw_vertical_line>:
/**
 * \brief Draw a vertical line, one pixel wide (generic implementation)
 */
void gfx_mono_draw_vertical_line(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t length,
                                 enum gfx_mono_color color)
{
     884:	b5f0      	push	{r4, r5, r6, r7, lr}
     886:	b087      	sub	sp, #28
     888:	000d      	movs	r5, r1
     88a:	a90c      	add	r1, sp, #48	; 0x30
     88c:	7809      	ldrb	r1, [r1, #0]
     88e:	9005      	str	r0, [sp, #20]
     890:	9103      	str	r1, [sp, #12]
	uint8_t y2bitpos;

	uint8_t y1pixelmask;
	uint8_t y2pixelmask;

	if (length == 0) {
     892:	2b00      	cmp	r3, #0
     894:	d00a      	beq.n	8ac <gfx_mono_draw_vertical_line+0x28>
		return;
	}

	y2 = y + length - 1;
     896:	1e51      	subs	r1, r2, #1

	if (y == y2) {
		me->display->interface->draw_pixel(me->display, x, y, color);
     898:	6800      	ldr	r0, [r0, #0]
	y2 = y + length - 1;
     89a:	1859      	adds	r1, r3, r1
     89c:	b2c9      	uxtb	r1, r1
		me->display->interface->draw_pixel(me->display, x, y, color);
     89e:	6887      	ldr	r7, [r0, #8]
	if (y == y2) {
     8a0:	428a      	cmp	r2, r1
     8a2:	d105      	bne.n	8b0 <gfx_mono_draw_vertical_line+0x2c>
		me->display->interface->draw_pixel(me->display, x, y, color);
     8a4:	0029      	movs	r1, r5
     8a6:	68fc      	ldr	r4, [r7, #12]
     8a8:	9b03      	ldr	r3, [sp, #12]
     8aa:	47a0      	blx	r4
			me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)0xFF, color);
		}

		me->display->interface->mask_byte(me->display, y2page, x, (enum gfx_mono_color)y2pixelmask, color);
	}
}
     8ac:	b007      	add	sp, #28
     8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (y2 >= me->display->height - 1) {
     8b0:	7943      	ldrb	r3, [r0, #5]
     8b2:	3b01      	subs	r3, #1
     8b4:	4299      	cmp	r1, r3
     8b6:	db00      	blt.n	8ba <gfx_mono_draw_vertical_line+0x36>
		y2 = me->display->height - 1;
     8b8:	b2d9      	uxtb	r1, r3
	y2page = y2 / 8;
     8ba:	08cb      	lsrs	r3, r1, #3
     8bc:	9304      	str	r3, [sp, #16]
	y1bitpos = y & 0x07;
     8be:	2307      	movs	r3, #7
     8c0:	469c      	mov	ip, r3
	y1page = y / 8;
     8c2:	08d4      	lsrs	r4, r2, #3
	y1pixelmask = 0xFF << y1bitpos;
     8c4:	0013      	movs	r3, r2
     8c6:	4662      	mov	r2, ip
     8c8:	4013      	ands	r3, r2
     8ca:	32f8      	adds	r2, #248	; 0xf8
     8cc:	0016      	movs	r6, r2
     8ce:	409e      	lsls	r6, r3
     8d0:	b2f3      	uxtb	r3, r6
	y2pixelmask = 0xFF >> (7 - y2bitpos);
     8d2:	4666      	mov	r6, ip
     8d4:	438e      	bics	r6, r1
     8d6:	4132      	asrs	r2, r6
     8d8:	b2d6      	uxtb	r6, r2
	if (y1page == y2page) {
     8da:	9a04      	ldr	r2, [sp, #16]
		me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)pixelmask, color);
     8dc:	693f      	ldr	r7, [r7, #16]
	if (y1page == y2page) {
     8de:	4294      	cmp	r4, r2
     8e0:	d106      	bne.n	8f0 <gfx_mono_draw_vertical_line+0x6c>
		me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)pixelmask, color);
     8e2:	9a03      	ldr	r2, [sp, #12]
     8e4:	0021      	movs	r1, r4
     8e6:	9200      	str	r2, [sp, #0]
     8e8:	002a      	movs	r2, r5
     8ea:	4033      	ands	r3, r6
		me->display->interface->mask_byte(me->display, y2page, x, (enum gfx_mono_color)y2pixelmask, color);
     8ec:	47b8      	blx	r7
     8ee:	e7dd      	b.n	8ac <gfx_mono_draw_vertical_line+0x28>
		me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)y1pixelmask, color);
     8f0:	9a03      	ldr	r2, [sp, #12]
     8f2:	9200      	str	r2, [sp, #0]
			me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)0xFF, color);
     8f4:	0021      	movs	r1, r4
     8f6:	002a      	movs	r2, r5
     8f8:	47b8      	blx	r7
     8fa:	9b05      	ldr	r3, [sp, #20]
		while (++y1page < y2page) {
     8fc:	3401      	adds	r4, #1
			me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)0xFF, color);
     8fe:	6818      	ldr	r0, [r3, #0]
		while (++y1page < y2page) {
     900:	b2e4      	uxtb	r4, r4
			me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)0xFF, color);
     902:	6883      	ldr	r3, [r0, #8]
     904:	691f      	ldr	r7, [r3, #16]
		while (++y1page < y2page) {
     906:	9b04      	ldr	r3, [sp, #16]
     908:	42a3      	cmp	r3, r4
     90a:	d805      	bhi.n	918 <gfx_mono_draw_vertical_line+0x94>
		me->display->interface->mask_byte(me->display, y2page, x, (enum gfx_mono_color)y2pixelmask, color);
     90c:	9b03      	ldr	r3, [sp, #12]
     90e:	002a      	movs	r2, r5
     910:	9300      	str	r3, [sp, #0]
     912:	9904      	ldr	r1, [sp, #16]
     914:	0033      	movs	r3, r6
     916:	e7e9      	b.n	8ec <gfx_mono_draw_vertical_line+0x68>
			me->display->interface->mask_byte(me->display, y1page, x, (enum gfx_mono_color)0xFF, color);
     918:	9b03      	ldr	r3, [sp, #12]
     91a:	9300      	str	r3, [sp, #0]
     91c:	23ff      	movs	r3, #255	; 0xff
     91e:	e7e9      	b.n	8f4 <gfx_mono_draw_vertical_line+0x70>

00000920 <gfx_mono_draw_rect>:
/**
 * \brief Draw an outline of a rectangle (generic implementation).
 */
void gfx_mono_draw_rect(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t width,
                        gfx_coord_t height, enum gfx_mono_color color)
{
     920:	b5f0      	push	{r4, r5, r6, r7, lr}
     922:	0016      	movs	r6, r2
     924:	0005      	movs	r5, r0
     926:	000c      	movs	r4, r1
     928:	b087      	sub	sp, #28
     92a:	9304      	str	r3, [sp, #16]
     92c:	ab0c      	add	r3, sp, #48	; 0x30
     92e:	781b      	ldrb	r3, [r3, #0]
	gfx_mono_draw_horizontal_line(me, x, y, width, color);
     930:	4f12      	ldr	r7, [pc, #72]	; (97c <gfx_mono_draw_rect+0x5c>)
{
     932:	9305      	str	r3, [sp, #20]
     934:	ab0d      	add	r3, sp, #52	; 0x34
     936:	781b      	ldrb	r3, [r3, #0]
     938:	9303      	str	r3, [sp, #12]
	gfx_mono_draw_horizontal_line(me, x, y, width, color);
     93a:	9300      	str	r3, [sp, #0]
     93c:	9b04      	ldr	r3, [sp, #16]
     93e:	47b8      	blx	r7
	gfx_mono_draw_horizontal_line(me, x, y + height - 1, width, color);
     940:	9b05      	ldr	r3, [sp, #20]
     942:	0021      	movs	r1, r4
     944:	1e5a      	subs	r2, r3, #1
     946:	9b03      	ldr	r3, [sp, #12]
     948:	18b2      	adds	r2, r6, r2
     94a:	0028      	movs	r0, r5
     94c:	9300      	str	r3, [sp, #0]
     94e:	b2d2      	uxtb	r2, r2
     950:	9b04      	ldr	r3, [sp, #16]
     952:	47b8      	blx	r7

	gfx_mono_draw_vertical_line(me, x, y, height, color);
     954:	9b03      	ldr	r3, [sp, #12]
     956:	0032      	movs	r2, r6
     958:	0021      	movs	r1, r4
     95a:	0028      	movs	r0, r5
     95c:	4f08      	ldr	r7, [pc, #32]	; (980 <gfx_mono_draw_rect+0x60>)
     95e:	9300      	str	r3, [sp, #0]
     960:	9b05      	ldr	r3, [sp, #20]
     962:	47b8      	blx	r7
	gfx_mono_draw_vertical_line(me, x + width - 1, y, height, color);
     964:	9904      	ldr	r1, [sp, #16]
     966:	9b03      	ldr	r3, [sp, #12]
     968:	3901      	subs	r1, #1
     96a:	1861      	adds	r1, r4, r1
     96c:	9300      	str	r3, [sp, #0]
     96e:	0032      	movs	r2, r6
     970:	0028      	movs	r0, r5
     972:	9b05      	ldr	r3, [sp, #20]
     974:	b2c9      	uxtb	r1, r1
     976:	47b8      	blx	r7
}
     978:	b007      	add	sp, #28
     97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     97c:	00000799 	.word	0x00000799
     980:	00000885 	.word	0x00000885

00000984 <gfx_mono_draw_filled_rect>:
/**
 * \brief Draw a filled rectangle (generic implementation).
 */
void gfx_mono_draw_filled_rect(const struct gfx_mono *const me, gfx_coord_t x, gfx_coord_t y, gfx_coord_t width,
                               gfx_coord_t height, enum gfx_mono_color color)
{
     984:	b5f0      	push	{r4, r5, r6, r7, lr}
     986:	b087      	sub	sp, #28
     988:	001e      	movs	r6, r3
     98a:	ab0c      	add	r3, sp, #48	; 0x30
     98c:	781c      	ldrb	r4, [r3, #0]
     98e:	ab0d      	add	r3, sp, #52	; 0x34
     990:	781b      	ldrb	r3, [r3, #0]
     992:	0007      	movs	r7, r0
     994:	9103      	str	r1, [sp, #12]
     996:	9204      	str	r2, [sp, #16]
     998:	9305      	str	r3, [sp, #20]
	if (height == 0) {
     99a:	2c00      	cmp	r4, #0
     99c:	d00f      	beq.n	9be <gfx_mono_draw_filled_rect+0x3a>
     99e:	3c01      	subs	r4, #1
     9a0:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(me, x, y + height, width, color);
     9a2:	9b04      	ldr	r3, [sp, #16]
     9a4:	0038      	movs	r0, r7
     9a6:	191a      	adds	r2, r3, r4
     9a8:	9b05      	ldr	r3, [sp, #20]
     9aa:	3c01      	subs	r4, #1
     9ac:	9300      	str	r3, [sp, #0]
     9ae:	9903      	ldr	r1, [sp, #12]
     9b0:	0033      	movs	r3, r6
     9b2:	4d04      	ldr	r5, [pc, #16]	; (9c4 <gfx_mono_draw_filled_rect+0x40>)
     9b4:	b2d2      	uxtb	r2, r2
     9b6:	b2e4      	uxtb	r4, r4
     9b8:	47a8      	blx	r5
	while (height-- > 0) {
     9ba:	2cff      	cmp	r4, #255	; 0xff
     9bc:	d1f1      	bne.n	9a2 <gfx_mono_draw_filled_rect+0x1e>
	}
}
     9be:	b007      	add	sp, #28
     9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	00000799 	.word	0x00000799

000009c8 <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
     9c8:	4b04      	ldr	r3, [pc, #16]	; (9dc <delay_us+0x14>)
{
     9ca:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     9cc:	681c      	ldr	r4, [r3, #0]
     9ce:	4b04      	ldr	r3, [pc, #16]	; (9e0 <delay_us+0x18>)
     9d0:	4798      	blx	r3
     9d2:	0001      	movs	r1, r0
     9d4:	4b03      	ldr	r3, [pc, #12]	; (9e4 <delay_us+0x1c>)
     9d6:	0020      	movs	r0, r4
     9d8:	4798      	blx	r3
}
     9da:	bd10      	pop	{r4, pc}
     9dc:	20000068 	.word	0x20000068
     9e0:	00000ab9 	.word	0x00000ab9
     9e4:	00000ad1 	.word	0x00000ad1

000009e8 <gfx_mono_init>:
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     9e8:	23c0      	movs	r3, #192	; 0xc0
     9ea:	05db      	lsls	r3, r3, #23
     9ec:	001a      	movs	r2, r3

/**
 * \brief Initialize GFX Mono library
 */
void gfx_mono_init(void)
{
     9ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
     9f0:	2408      	movs	r4, #8
     9f2:	3288      	adds	r2, #136	; 0x88
     9f4:	6014      	str	r4, [r2, #0]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     9f6:	4a19      	ldr	r2, [pc, #100]	; (a5c <gfx_mono_init+0x74>)
     9f8:	25c0      	movs	r5, #192	; 0xc0
     9fa:	0011      	movs	r1, r2
     9fc:	4818      	ldr	r0, [pc, #96]	; (a60 <gfx_mono_init+0x78>)
     9fe:	31a8      	adds	r1, #168	; 0xa8
     a00:	062d      	lsls	r5, r5, #24
     a02:	6008      	str	r0, [r1, #0]
     a04:	600d      	str	r5, [r1, #0]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a06:	2080      	movs	r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a08:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0a:	0400      	lsls	r0, r0, #16
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a0c:	05c9      	lsls	r1, r1, #23
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a0e:	6098      	str	r0, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a10:	6291      	str	r1, [r2, #40]	; 0x28
     a12:	4914      	ldr	r1, [pc, #80]	; (a64 <gfx_mono_init+0x7c>)
     a14:	4e14      	ldr	r6, [pc, #80]	; (a68 <gfx_mono_init+0x80>)
     a16:	6291      	str	r1, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     a18:	2180      	movs	r1, #128	; 0x80
     a1a:	0189      	lsls	r1, r1, #6
     a1c:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     a1e:	6296      	str	r6, [r2, #40]	; 0x28
     a20:	6295      	str	r5, [r2, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     a22:	001a      	movs	r2, r3
     a24:	3298      	adds	r2, #152	; 0x98
     a26:	6014      	str	r4, [r2, #0]
     a28:	6198      	str	r0, [r3, #24]
     a2a:	6199      	str	r1, [r3, #24]
	gpio_set_pin_direction(RES_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_direction(DC_PIN, GPIO_DIRECTION_OUT);
	gpio_set_pin_level(CS_PIN, true);
	gpio_set_pin_level(RES_PIN, true);
	gpio_set_pin_level(DC_PIN, true);
	ug2832hsweg04_construct(&DISPLAY_INSTANCE_c12832a1z_desc.parent,
     a2c:	230d      	movs	r3, #13
     a2e:	4c0f      	ldr	r4, [pc, #60]	; (a6c <gfx_mono_init+0x84>)
     a30:	9301      	str	r3, [sp, #4]
     a32:	330a      	adds	r3, #10
     a34:	4a0e      	ldr	r2, [pc, #56]	; (a70 <gfx_mono_init+0x88>)
     a36:	9300      	str	r3, [sp, #0]
     a38:	0020      	movs	r0, r4
     a3a:	490e      	ldr	r1, [pc, #56]	; (a74 <gfx_mono_init+0x8c>)
     a3c:	4d0e      	ldr	r5, [pc, #56]	; (a78 <gfx_mono_init+0x90>)
     a3e:	330c      	adds	r3, #12
     a40:	47a8      	blx	r5
							DISPLAY_INSTANCE_buffer,
							&DISPLAY_SPI.io,
							CS_PIN,
							RES_PIN,
							DC_PIN);
	gfx_mono_construct(&MONOCHROME_GRAPHICS_desc, &DISPLAY_INSTANCE_c12832a1z_desc.parent);
     a42:	0025      	movs	r5, r4
     a44:	3528      	adds	r5, #40	; 0x28
     a46:	0021      	movs	r1, r4
     a48:	0028      	movs	r0, r5
     a4a:	4b0c      	ldr	r3, [pc, #48]	; (a7c <gfx_mono_init+0x94>)
     a4c:	4798      	blx	r3
	gfx_mono_text_construct(&MONOCHROME_TEXT_desc, &MONOCHROME_GRAPHICS_desc);
     a4e:	0020      	movs	r0, r4
     a50:	0029      	movs	r1, r5
     a52:	4b0b      	ldr	r3, [pc, #44]	; (a80 <gfx_mono_init+0x98>)
     a54:	302c      	adds	r0, #44	; 0x2c
     a56:	4798      	blx	r3
}
     a58:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	41004400 	.word	0x41004400
     a60:	40000008 	.word	0x40000008
     a64:	c0000080 	.word	0xc0000080
     a68:	40002000 	.word	0x40002000
     a6c:	2000006c 	.word	0x2000006c
     a70:	200002a8 	.word	0x200002a8
     a74:	2000009c 	.word	0x2000009c
     a78:	00000199 	.word	0x00000199
     a7c:	00000795 	.word	0x00000795
     a80:	0000064d 	.word	0x0000064d

00000a84 <_init_chip>:
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     a84:	4b07      	ldr	r3, [pc, #28]	; (aa4 <_init_chip+0x20>)

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a86:	b510      	push	{r4, lr}
     a88:	685a      	ldr	r2, [r3, #4]
     a8a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     a8c:	4b06      	ldr	r3, [pc, #24]	; (aa8 <_init_chip+0x24>)
     a8e:	4798      	blx	r3
	_sysctrl_init_sources();
     a90:	4b06      	ldr	r3, [pc, #24]	; (aac <_init_chip+0x28>)
     a92:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     a94:	2008      	movs	r0, #8
     a96:	4c06      	ldr	r4, [pc, #24]	; (ab0 <_init_chip+0x2c>)
     a98:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     a9a:	4b06      	ldr	r3, [pc, #24]	; (ab4 <_init_chip+0x30>)
     a9c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a9e:	20f7      	movs	r0, #247	; 0xf7
     aa0:	47a0      	blx	r4
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     aa2:	bd10      	pop	{r4, pc}
     aa4:	41004000 	.word	0x41004000
     aa8:	00000ae1 	.word	0x00000ae1
     aac:	000004cd 	.word	0x000004cd
     ab0:	00000b01 	.word	0x00000b01
     ab4:	00000515 	.word	0x00000515

00000ab8 <_get_cycles_for_us>:
{
	switch (power) {
	case 8:
		return (us * (freq / 100000) + 29) / 30;
	case 7:
		return (us * (freq / 10000) + 299) / 300;
     ab8:	2364      	movs	r3, #100	; 0x64
     aba:	2196      	movs	r1, #150	; 0x96
     abc:	4358      	muls	r0, r3

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     abe:	b510      	push	{r4, lr}
		return (us * (freq / 10000) + 299) / 300;
     ac0:	302c      	adds	r0, #44	; 0x2c
     ac2:	4b02      	ldr	r3, [pc, #8]	; (acc <_get_cycles_for_us+0x14>)
     ac4:	30ff      	adds	r0, #255	; 0xff
     ac6:	0049      	lsls	r1, r1, #1
     ac8:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     aca:	bd10      	pop	{r4, pc}
     acc:	00001389 	.word	0x00001389

00000ad0 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     ad0:	3901      	subs	r1, #1
     ad2:	d8fd      	bhi.n	ad0 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     ad4:	4770      	bx	lr

00000ad6 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     ad6:	2800      	cmp	r0, #0
     ad8:	d100      	bne.n	adc <assert+0x6>
		__asm("BKPT #0");
     ada:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     adc:	4770      	bx	lr
	...

00000ae0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     ae0:	4b06      	ldr	r3, [pc, #24]	; (afc <_pm_init+0x1c>)
     ae2:	7a1a      	ldrb	r2, [r3, #8]
     ae4:	b2d2      	uxtb	r2, r2
     ae6:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     ae8:	7a5a      	ldrb	r2, [r3, #9]
     aea:	b2d2      	uxtb	r2, r2
     aec:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     aee:	7a9a      	ldrb	r2, [r3, #10]
     af0:	b2d2      	uxtb	r2, r2
     af2:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     af4:	7ada      	ldrb	r2, [r3, #11]
     af6:	b2d2      	uxtb	r2, r2
     af8:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     afa:	4770      	bx	lr
     afc:	40000400 	.word	0x40000400

00000b00 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GEN_0_GENEN == 1
	if (bm & (1ul << 0)) {
     b00:	07c3      	lsls	r3, r0, #31
     b02:	d506      	bpl.n	b12 <_gclk_init_generators_by_fref+0x12>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     b04:	2280      	movs	r2, #128	; 0x80
     b06:	4b03      	ldr	r3, [pc, #12]	; (b14 <_gclk_init_generators_by_fref+0x14>)
     b08:	0052      	lsls	r2, r2, #1
     b0a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b0c:	2283      	movs	r2, #131	; 0x83
     b0e:	0252      	lsls	r2, r2, #9
     b10:	605a      	str	r2, [r3, #4]
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GEN_8_GENEN << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     b12:	4770      	bx	lr
     b14:	40000c00 	.word	0x40000c00

00000b18 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
     b18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
     b1a:	4b0b      	ldr	r3, [pc, #44]	; (b48 <gpio_get_pin_level+0x30>)
     b1c:	0005      	movs	r5, r0
     b1e:	a801      	add	r0, sp, #4
     b20:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     b22:	22c0      	movs	r2, #192	; 0xc0
	return tmp;
}

static inline hri_port_in_reg_t hri_port_read_IN_reg(const void *const hw, uint8_t submodule_index)
{
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     b24:	4b09      	ldr	r3, [pc, #36]	; (b4c <gpio_get_pin_level+0x34>)
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
     b26:	05d2      	lsls	r2, r2, #23
     b28:	6814      	ldr	r4, [r2, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
     b2a:	6a1b      	ldr	r3, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
     b2c:	6910      	ldr	r0, [r2, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
     b2e:	4058      	eors	r0, r3
     b30:	4004      	ands	r4, r0
     b32:	405c      	eors	r4, r3

	CRITICAL_SECTION_LEAVE();
     b34:	a801      	add	r0, sp, #4
     b36:	4b06      	ldr	r3, [pc, #24]	; (b50 <gpio_get_pin_level+0x38>)
     b38:	4798      	blx	r3
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
     b3a:	2001      	movs	r0, #1
     b3c:	40a8      	lsls	r0, r5
     b3e:	4004      	ands	r4, r0
     b40:	1e63      	subs	r3, r4, #1
     b42:	419c      	sbcs	r4, r3
     b44:	b2e0      	uxtb	r0, r4
}
     b46:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     b48:	0000136d 	.word	0x0000136d
     b4c:	41004400 	.word	0x41004400
     b50:	0000137b 	.word	0x0000137b

00000b54 <main>:
#include <stdio.h>
#include "gfx_mono_main.h"
#include "gfx_mono_font_basic_6x7.h"

int main(void)
{
     b54:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     b56:	4b32      	ldr	r3, [pc, #200]	; (c20 <main+0xcc>)
{
     b58:	b08f      	sub	sp, #60	; 0x3c
	atmel_start_init();
     b5a:	4798      	blx	r3
	
	// Display Message
	const uint8_t msg_temperatura[] = "Temperatura!";
     b5c:	4c31      	ldr	r4, [pc, #196]	; (c24 <main+0xd0>)
     b5e:	220d      	movs	r2, #13
     b60:	4931      	ldr	r1, [pc, #196]	; (c28 <main+0xd4>)
     b62:	a80a      	add	r0, sp, #40	; 0x28
     b64:	47a0      	blx	r4
	const uint8_t msg_luz[] = "Luz!";
     b66:	2205      	movs	r2, #5
     b68:	4930      	ldr	r1, [pc, #192]	; (c2c <main+0xd8>)
     b6a:	a805      	add	r0, sp, #20
     b6c:	47a0      	blx	r4
	const uint8_t msg_orient[] = "Orientacao!";
     b6e:	220c      	movs	r2, #12
     b70:	492f      	ldr	r1, [pc, #188]	; (c30 <main+0xdc>)
     b72:	a807      	add	r0, sp, #28
     b74:	47a0      	blx	r4

	// Enable SPI and OLED
	spi_m_sync_enable(&DISPLAY_SPI);
     b76:	482f      	ldr	r0, [pc, #188]	; (c34 <main+0xe0>)
     b78:	4b2f      	ldr	r3, [pc, #188]	; (c38 <main+0xe4>)
     b7a:	4798      	blx	r3
	gfx_mono_init();
     b7c:	4b2f      	ldr	r3, [pc, #188]	; (c3c <main+0xe8>)
     b7e:	4798      	blx	r3
	
	// Draw a Rectangle
	gfx_mono_draw_rect(&MONOCHROME_GRAPHICS_desc, 0, 0, UG2832HSWEG04_LCD_WIDTH, UG2832HSWEG04_LCD_HEIGHT, GFX_PIXEL_SET);
     b80:	2301      	movs	r3, #1
     b82:	2200      	movs	r2, #0
     b84:	9301      	str	r3, [sp, #4]
     b86:	331f      	adds	r3, #31
     b88:	4c2d      	ldr	r4, [pc, #180]	; (c40 <main+0xec>)
     b8a:	9300      	str	r3, [sp, #0]
     b8c:	0011      	movs	r1, r2
     b8e:	482d      	ldr	r0, [pc, #180]	; (c44 <main+0xf0>)
     b90:	3360      	adds	r3, #96	; 0x60
     b92:	47a0      	blx	r4
		bool botao_1 = gpio_get_pin_level(PA22);
		bool botao_2 = gpio_get_pin_level(PA06);
		bool botao_3 = gpio_get_pin_level(PA07);
		
		if(!botao_1){
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_desc, "              ", 20, 12, &basic_6x7);
     b94:	2714      	movs	r7, #20
     b96:	240c      	movs	r4, #12
		bool botao_1 = gpio_get_pin_level(PA22);
     b98:	4e2b      	ldr	r6, [pc, #172]	; (c48 <main+0xf4>)
     b9a:	2016      	movs	r0, #22
     b9c:	47b0      	blx	r6
     b9e:	0005      	movs	r5, r0
		bool botao_2 = gpio_get_pin_level(PA06);
     ba0:	2006      	movs	r0, #6
     ba2:	47b0      	blx	r6
     ba4:	9002      	str	r0, [sp, #8]
		bool botao_3 = gpio_get_pin_level(PA07);
     ba6:	2007      	movs	r0, #7
     ba8:	47b0      	blx	r6
     baa:	9003      	str	r0, [sp, #12]
		if(!botao_1){
     bac:	2d00      	cmp	r5, #0
     bae:	d10f      	bne.n	bd0 <main+0x7c>
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_desc, "              ", 20, 12, &basic_6x7);
     bb0:	4e26      	ldr	r6, [pc, #152]	; (c4c <main+0xf8>)
     bb2:	4b27      	ldr	r3, [pc, #156]	; (c50 <main+0xfc>)
     bb4:	003a      	movs	r2, r7
     bb6:	0030      	movs	r0, r6
     bb8:	4926      	ldr	r1, [pc, #152]	; (c54 <main+0x100>)
     bba:	9300      	str	r3, [sp, #0]
     bbc:	4d26      	ldr	r5, [pc, #152]	; (c58 <main+0x104>)
     bbe:	0023      	movs	r3, r4
     bc0:	47a8      	blx	r5
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_desc, msg_temperatura, 20, 12, &basic_6x7);
     bc2:	4b23      	ldr	r3, [pc, #140]	; (c50 <main+0xfc>)
     bc4:	003a      	movs	r2, r7
     bc6:	9300      	str	r3, [sp, #0]
     bc8:	0030      	movs	r0, r6
     bca:	0023      	movs	r3, r4
     bcc:	a90a      	add	r1, sp, #40	; 0x28
     bce:	47a8      	blx	r5
		}
		if(!botao_2){
     bd0:	9b02      	ldr	r3, [sp, #8]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d10f      	bne.n	bf6 <main+0xa2>
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_desc, "              ", 20, 12, &basic_6x7);
     bd6:	4e1d      	ldr	r6, [pc, #116]	; (c4c <main+0xf8>)
     bd8:	4b1d      	ldr	r3, [pc, #116]	; (c50 <main+0xfc>)
     bda:	003a      	movs	r2, r7
     bdc:	0030      	movs	r0, r6
     bde:	491d      	ldr	r1, [pc, #116]	; (c54 <main+0x100>)
     be0:	9300      	str	r3, [sp, #0]
     be2:	4d1d      	ldr	r5, [pc, #116]	; (c58 <main+0x104>)
     be4:	0023      	movs	r3, r4
     be6:	47a8      	blx	r5
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_desc, msg_luz, 20, 12, &basic_6x7);
     be8:	4b19      	ldr	r3, [pc, #100]	; (c50 <main+0xfc>)
     bea:	003a      	movs	r2, r7
     bec:	9300      	str	r3, [sp, #0]
     bee:	0030      	movs	r0, r6
     bf0:	0023      	movs	r3, r4
     bf2:	a905      	add	r1, sp, #20
     bf4:	47a8      	blx	r5
		}
		if(!botao_3){
     bf6:	9b03      	ldr	r3, [sp, #12]
     bf8:	2b00      	cmp	r3, #0
     bfa:	d1cd      	bne.n	b98 <main+0x44>
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_desc, "              ", 20, 12, &basic_6x7);
     bfc:	4e13      	ldr	r6, [pc, #76]	; (c4c <main+0xf8>)
     bfe:	4b14      	ldr	r3, [pc, #80]	; (c50 <main+0xfc>)
     c00:	003a      	movs	r2, r7
     c02:	0030      	movs	r0, r6
     c04:	9300      	str	r3, [sp, #0]
     c06:	4913      	ldr	r1, [pc, #76]	; (c54 <main+0x100>)
     c08:	0023      	movs	r3, r4
     c0a:	4d13      	ldr	r5, [pc, #76]	; (c58 <main+0x104>)
     c0c:	47a8      	blx	r5
			gfx_mono_text_draw_string(&MONOCHROME_TEXT_desc, msg_orient, 20, 12, &basic_6x7);
     c0e:	4b10      	ldr	r3, [pc, #64]	; (c50 <main+0xfc>)
     c10:	003a      	movs	r2, r7
     c12:	9300      	str	r3, [sp, #0]
     c14:	0030      	movs	r0, r6
     c16:	0023      	movs	r3, r4
     c18:	a907      	add	r1, sp, #28
     c1a:	47a8      	blx	r5
     c1c:	e7bc      	b.n	b98 <main+0x44>
     c1e:	46c0      	nop			; (mov r8, r8)
     c20:	00001359 	.word	0x00001359
     c24:	000014e9 	.word	0x000014e9
     c28:	00001551 	.word	0x00001551
     c2c:	0000155e 	.word	0x0000155e
     c30:	00001563 	.word	0x00001563
     c34:	2000029c 	.word	0x2000029c
     c38:	00000575 	.word	0x00000575
     c3c:	000009e9 	.word	0x000009e9
     c40:	00000921 	.word	0x00000921
     c44:	20000094 	.word	0x20000094
     c48:	00000b19 	.word	0x00000b19
     c4c:	20000098 	.word	0x20000098
     c50:	2000003c 	.word	0x2000003c
     c54:	00001542 	.word	0x00001542
     c58:	00000721 	.word	0x00000721

00000c5c <ssd1306_read_data>:
 */
uint8_t ssd1306_read_data(const struct display_ctrl_mono *const me)
{
	(void)me;
	return 0;
}
     c5c:	2000      	movs	r0, #0
     c5e:	4770      	bx	lr

00000c60 <ssd1306_write_data>:
{
     c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     c62:	466a      	mov	r2, sp
     c64:	000b      	movs	r3, r1
     c66:	0006      	movs	r6, r0
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     c68:	2401      	movs	r4, #1
     c6a:	71d3      	strb	r3, [r2, #7]
	gpio_set_pin_level(ctrl->pin_dc, true);
     c6c:	7ab3      	ldrb	r3, [r6, #10]
{
     c6e:	1dd1      	adds	r1, r2, #7
     c70:	251f      	movs	r5, #31
     c72:	001a      	movs	r2, r3
     c74:	0027      	movs	r7, r4
     c76:	402a      	ands	r2, r5
     c78:	4097      	lsls	r7, r2
     c7a:	003a      	movs	r2, r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     c7c:	27c0      	movs	r7, #192	; 0xc0
     c7e:	095b      	lsrs	r3, r3, #5
     c80:	05ff      	lsls	r7, r7, #23
     c82:	01db      	lsls	r3, r3, #7
     c84:	19db      	adds	r3, r3, r7
	struct io_descriptor *      io   = me->io;
     c86:	6800      	ldr	r0, [r0, #0]
     c88:	619a      	str	r2, [r3, #24]
	gpio_set_pin_level(ctrl->pin_cs, false);
     c8a:	7a33      	ldrb	r3, [r6, #8]
     c8c:	0027      	movs	r7, r4
     c8e:	001a      	movs	r2, r3
     c90:	402a      	ands	r2, r5
     c92:	4097      	lsls	r7, r2
     c94:	003a      	movs	r2, r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     c96:	27c0      	movs	r7, #192	; 0xc0
     c98:	095b      	lsrs	r3, r3, #5
     c9a:	05ff      	lsls	r7, r7, #23
     c9c:	01db      	lsls	r3, r3, #7
     c9e:	19db      	adds	r3, r3, r7
     ca0:	615a      	str	r2, [r3, #20]
	io->write(io, &data, 1);
     ca2:	0022      	movs	r2, r4
     ca4:	6803      	ldr	r3, [r0, #0]
     ca6:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
     ca8:	7a33      	ldrb	r3, [r6, #8]
     caa:	401d      	ands	r5, r3
     cac:	40ac      	lsls	r4, r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     cae:	095b      	lsrs	r3, r3, #5
     cb0:	01db      	lsls	r3, r3, #7
     cb2:	19db      	adds	r3, r3, r7
     cb4:	619c      	str	r4, [r3, #24]
}
     cb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000cb8 <ssd1306_write_command>:
{
     cb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     cba:	466a      	mov	r2, sp
     cbc:	000b      	movs	r3, r1
     cbe:	0006      	movs	r6, r0
     cc0:	2401      	movs	r4, #1
     cc2:	71d3      	strb	r3, [r2, #7]
	gpio_set_pin_level(ctrl->pin_dc, false);
     cc4:	7ab3      	ldrb	r3, [r6, #10]
{
     cc6:	1dd1      	adds	r1, r2, #7
     cc8:	251f      	movs	r5, #31
     cca:	001a      	movs	r2, r3
     ccc:	0027      	movs	r7, r4
     cce:	402a      	ands	r2, r5
     cd0:	4097      	lsls	r7, r2
     cd2:	003a      	movs	r2, r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     cd4:	27c0      	movs	r7, #192	; 0xc0
     cd6:	095b      	lsrs	r3, r3, #5
     cd8:	05ff      	lsls	r7, r7, #23
     cda:	01db      	lsls	r3, r3, #7
     cdc:	19db      	adds	r3, r3, r7
	struct io_descriptor *      io   = me->io;
     cde:	6800      	ldr	r0, [r0, #0]
     ce0:	615a      	str	r2, [r3, #20]
	gpio_set_pin_level(ctrl->pin_cs, false);
     ce2:	7a33      	ldrb	r3, [r6, #8]
     ce4:	0027      	movs	r7, r4
     ce6:	001a      	movs	r2, r3
     ce8:	402a      	ands	r2, r5
     cea:	4097      	lsls	r7, r2
     cec:	003a      	movs	r2, r7
     cee:	27c0      	movs	r7, #192	; 0xc0
     cf0:	095b      	lsrs	r3, r3, #5
     cf2:	05ff      	lsls	r7, r7, #23
     cf4:	01db      	lsls	r3, r3, #7
     cf6:	19db      	adds	r3, r3, r7
     cf8:	615a      	str	r2, [r3, #20]
	io->write(io, &command, 1);
     cfa:	0022      	movs	r2, r4
     cfc:	6803      	ldr	r3, [r0, #0]
     cfe:	4798      	blx	r3
	gpio_set_pin_level(ctrl->pin_cs, true);
     d00:	7a33      	ldrb	r3, [r6, #8]
     d02:	401d      	ands	r5, r3
     d04:	40ac      	lsls	r4, r5
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     d06:	095b      	lsrs	r3, r3, #5
     d08:	01db      	lsls	r3, r3, #7
     d0a:	19db      	adds	r3, r3, r7
     d0c:	619c      	str	r4, [r3, #24]
}
     d0e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000d10 <ssd1306_set_page_address>:
/**
 * \brief Set current page in display RAM
 */
void ssd1306_set_page_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
	ssd1306_write_command(me, SSD1306_CMD_SET_PAGE_START_ADDRESS(address & 0xF));
     d10:	2307      	movs	r3, #7
{
     d12:	b510      	push	{r4, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_PAGE_START_ADDRESS(address & 0xF));
     d14:	4019      	ands	r1, r3
     d16:	33a9      	adds	r3, #169	; 0xa9
     d18:	4319      	orrs	r1, r3
     d1a:	4b01      	ldr	r3, [pc, #4]	; (d20 <ssd1306_set_page_address+0x10>)
     d1c:	4798      	blx	r3
}
     d1e:	bd10      	pop	{r4, pc}
     d20:	00000cb9 	.word	0x00000cb9

00000d24 <ssd1306_set_column_address>:

/**
 * \brief Set current column in display RAM
 */
void ssd1306_set_column_address(const struct display_ctrl_mono *const me, uint8_t address)
{
     d24:	b570      	push	{r4, r5, r6, lr}
	address &= 0x7F;
	ssd1306_write_command(me, SSD1306_CMD_SET_HIGH_COL(address >> 4));
     d26:	064b      	lsls	r3, r1, #25
{
     d28:	000c      	movs	r4, r1
	ssd1306_write_command(me, SSD1306_CMD_SET_HIGH_COL(address >> 4));
     d2a:	2110      	movs	r1, #16
     d2c:	0f5b      	lsrs	r3, r3, #29
     d2e:	4e04      	ldr	r6, [pc, #16]	; (d40 <ssd1306_set_column_address+0x1c>)
     d30:	4319      	orrs	r1, r3
{
     d32:	0005      	movs	r5, r0
	ssd1306_write_command(me, SSD1306_CMD_SET_HIGH_COL(address >> 4));
     d34:	47b0      	blx	r6
	ssd1306_write_command(me, SSD1306_CMD_SET_LOW_COL(address & 0x0F));
     d36:	210f      	movs	r1, #15
     d38:	0028      	movs	r0, r5
     d3a:	4021      	ands	r1, r4
     d3c:	47b0      	blx	r6
}
     d3e:	bd70      	pop	{r4, r5, r6, pc}
     d40:	00000cb9 	.word	0x00000cb9

00000d44 <ssd1306_set_start_line_address>:
/**
 * \brief Set the display start draw line address
 */
void ssd1306_set_start_line_address(const struct display_ctrl_mono *const me, const uint8_t address)
{
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(address & 0x3F));
     d44:	233f      	movs	r3, #63	; 0x3f
     d46:	400b      	ands	r3, r1
     d48:	2140      	movs	r1, #64	; 0x40
{
     d4a:	b510      	push	{r4, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(address & 0x3F));
     d4c:	4319      	orrs	r1, r3
     d4e:	4b01      	ldr	r3, [pc, #4]	; (d54 <ssd1306_set_start_line_address+0x10>)
     d50:	4798      	blx	r3
}
     d52:	bd10      	pop	{r4, pc}
     d54:	00000cb9 	.word	0x00000cb9

00000d58 <ssd1306_hard_reset>:
{
     d58:	b510      	push	{r4, lr}
	display_ctrl_mono_hard_reset(((const struct ssd1306 *)me)->pin_res, 10);
     d5a:	210a      	movs	r1, #10
     d5c:	7a40      	ldrb	r0, [r0, #9]
     d5e:	4b01      	ldr	r3, [pc, #4]	; (d64 <ssd1306_hard_reset+0xc>)
     d60:	4798      	blx	r3
}
     d62:	bd10      	pop	{r4, pc}
     d64:	0000132d 	.word	0x0000132d

00000d68 <ssd1306_disable_sleep>:
{
     d68:	b510      	push	{r4, lr}
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_ON);
     d6a:	21af      	movs	r1, #175	; 0xaf
     d6c:	4b01      	ldr	r3, [pc, #4]	; (d74 <ssd1306_disable_sleep+0xc>)
     d6e:	4798      	blx	r3
}
     d70:	bd10      	pop	{r4, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	00000cb9 	.word	0x00000cb9

00000d78 <ssd1306_set_contrast>:

/**
 * \brief Set the display contrast level
 */
uint8_t ssd1306_set_contrast(const struct display_ctrl_mono *const me, const uint8_t contrast)
{
     d78:	b570      	push	{r4, r5, r6, lr}
     d7a:	0005      	movs	r5, r0
     d7c:	000c      	movs	r4, r1
	ssd1306_write_command(me, SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
     d7e:	4e04      	ldr	r6, [pc, #16]	; (d90 <ssd1306_set_contrast+0x18>)
     d80:	2181      	movs	r1, #129	; 0x81
     d82:	47b0      	blx	r6
	ssd1306_write_command(me, contrast);
     d84:	0028      	movs	r0, r5
     d86:	0021      	movs	r1, r4
     d88:	47b0      	blx	r6

	return contrast;
}
     d8a:	0020      	movs	r0, r4
     d8c:	bd70      	pop	{r4, r5, r6, pc}
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	00000cb9 	.word	0x00000cb9

00000d94 <ssd1306_construct>:
{
     d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d96:	0004      	movs	r4, r0
     d98:	0016      	movs	r6, r2
     d9a:	001d      	movs	r5, r3
     d9c:	ab06      	add	r3, sp, #24
     d9e:	781f      	ldrb	r7, [r3, #0]
	display_ctrl_mono_construct(me, io, &ssd1306_interface);
     da0:	4a25      	ldr	r2, [pc, #148]	; (e38 <ssd1306_construct+0xa4>)
     da2:	4b26      	ldr	r3, [pc, #152]	; (e3c <ssd1306_construct+0xa8>)
     da4:	4798      	blx	r3
	ssd1306_hard_reset(me);
     da6:	4b26      	ldr	r3, [pc, #152]	; (e40 <ssd1306_construct+0xac>)
     da8:	0020      	movs	r0, r4
	ssd->pin_cs  = cs;
     daa:	7226      	strb	r6, [r4, #8]
	ssd->pin_res = res;
     dac:	7265      	strb	r5, [r4, #9]
	ssd->pin_dc  = dc;
     dae:	72a7      	strb	r7, [r4, #10]
	ssd1306_hard_reset(me);
     db0:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_SET_MULTIPLEX_RATIO);
     db2:	4d24      	ldr	r5, [pc, #144]	; (e44 <ssd1306_construct+0xb0>)
     db4:	0020      	movs	r0, r4
     db6:	21a8      	movs	r1, #168	; 0xa8
     db8:	47a8      	blx	r5
	ssd1306_write_command(me, 0x1F);
     dba:	0020      	movs	r0, r4
     dbc:	211f      	movs	r1, #31
     dbe:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_OFFSET);
     dc0:	0020      	movs	r0, r4
     dc2:	21d3      	movs	r1, #211	; 0xd3
     dc4:	47a8      	blx	r5
	ssd1306_write_command(me, 0x00);
     dc6:	0020      	movs	r0, r4
     dc8:	2100      	movs	r1, #0
     dca:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_START_LINE(0x00));
     dcc:	0020      	movs	r0, r4
     dce:	2140      	movs	r1, #64	; 0x40
     dd0:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
     dd2:	0020      	movs	r0, r4
     dd4:	21a1      	movs	r1, #161	; 0xa1
     dd6:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
     dd8:	0020      	movs	r0, r4
     dda:	21c8      	movs	r1, #200	; 0xc8
     ddc:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_COM_PINS);
     dde:	0020      	movs	r0, r4
     de0:	21da      	movs	r1, #218	; 0xda
     de2:	47a8      	blx	r5
	ssd1306_write_command(me, 0x02);
     de4:	0020      	movs	r0, r4
     de6:	2102      	movs	r1, #2
     de8:	47a8      	blx	r5
	ssd1306_set_contrast(me, 0x8F);
     dea:	4b17      	ldr	r3, [pc, #92]	; (e48 <ssd1306_construct+0xb4>)
     dec:	218f      	movs	r1, #143	; 0x8f
     dee:	0020      	movs	r0, r4
     df0:	4798      	blx	r3
	ssd1306_write_command(me, SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
     df2:	0020      	movs	r0, r4
     df4:	21a4      	movs	r1, #164	; 0xa4
     df6:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_NORMAL_DISPLAY);
     df8:	0020      	movs	r0, r4
     dfa:	21a6      	movs	r1, #166	; 0xa6
     dfc:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
     dfe:	0020      	movs	r0, r4
     e00:	21d5      	movs	r1, #213	; 0xd5
     e02:	47a8      	blx	r5
	ssd1306_write_command(me, 0x80);
     e04:	0020      	movs	r0, r4
     e06:	2180      	movs	r1, #128	; 0x80
     e08:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
     e0a:	0020      	movs	r0, r4
     e0c:	218d      	movs	r1, #141	; 0x8d
     e0e:	47a8      	blx	r5
	ssd1306_write_command(me, 0x14);
     e10:	0020      	movs	r0, r4
     e12:	2114      	movs	r1, #20
     e14:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
     e16:	0020      	movs	r0, r4
     e18:	21db      	movs	r1, #219	; 0xdb
     e1a:	47a8      	blx	r5
	ssd1306_write_command(me, 0x40);
     e1c:	0020      	movs	r0, r4
     e1e:	2140      	movs	r1, #64	; 0x40
     e20:	47a8      	blx	r5
	ssd1306_write_command(me, SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
     e22:	0020      	movs	r0, r4
     e24:	21d9      	movs	r1, #217	; 0xd9
     e26:	47a8      	blx	r5
	ssd1306_write_command(me, 0xF1);
     e28:	21f1      	movs	r1, #241	; 0xf1
     e2a:	0020      	movs	r0, r4
     e2c:	47a8      	blx	r5
	ssd1306_on(me);
     e2e:	0020      	movs	r0, r4
     e30:	4b06      	ldr	r3, [pc, #24]	; (e4c <ssd1306_construct+0xb8>)
     e32:	4798      	blx	r3
}
     e34:	0020      	movs	r0, r4
     e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e38:	20000028 	.word	0x20000028
     e3c:	00001325 	.word	0x00001325
     e40:	00000d59 	.word	0x00000d59
     e44:	00000cb9 	.word	0x00000cb9
     e48:	00000d79 	.word	0x00000d79
     e4c:	00000d69 	.word	0x00000d69

00000e50 <gpio_set_pin_direction>:
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     e50:	221f      	movs	r2, #31
     e52:	2301      	movs	r3, #1
     e54:	4002      	ands	r2, r0
     e56:	4093      	lsls	r3, r2
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e58:	22c0      	movs	r2, #192	; 0xc0
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e5a:	0940      	lsrs	r0, r0, #5
     e5c:	01c0      	lsls	r0, r0, #7
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e5e:	05d2      	lsls	r2, r2, #23
{
     e60:	b530      	push	{r4, r5, lr}
     e62:	1882      	adds	r2, r0, r2
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     e64:	b29d      	uxth	r5, r3
		                                | ((mask & 0xffff0000) >> 16));
     e66:	0c1c      	lsrs	r4, r3, #16
	switch (direction) {
     e68:	2902      	cmp	r1, #2
     e6a:	d009      	beq.n	e80 <gpio_set_pin_direction+0x30>
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     e6c:	6053      	str	r3, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e6e:	4b09      	ldr	r3, [pc, #36]	; (e94 <gpio_set_pin_direction+0x44>)
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     e70:	4a09      	ldr	r2, [pc, #36]	; (e98 <gpio_set_pin_direction+0x48>)
     e72:	18c0      	adds	r0, r0, r3
     e74:	432a      	orrs	r2, r5
		hri_port_write_WRCONFIG_reg(PORT,
     e76:	4b09      	ldr	r3, [pc, #36]	; (e9c <gpio_set_pin_direction+0x4c>)
     e78:	6282      	str	r2, [r0, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
     e7a:	4323      	orrs	r3, r4
     e7c:	6283      	str	r3, [r0, #40]	; 0x28
}
     e7e:	bd30      	pop	{r4, r5, pc}
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     e80:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     e82:	4b04      	ldr	r3, [pc, #16]	; (e94 <gpio_set_pin_direction+0x44>)
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     e84:	2280      	movs	r2, #128	; 0x80
     e86:	18c0      	adds	r0, r0, r3
		hri_port_write_WRCONFIG_reg(
     e88:	23c0      	movs	r3, #192	; 0xc0
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     e8a:	05d2      	lsls	r2, r2, #23
     e8c:	432a      	orrs	r2, r5
     e8e:	6282      	str	r2, [r0, #40]	; 0x28
		hri_port_write_WRCONFIG_reg(
     e90:	061b      	lsls	r3, r3, #24
     e92:	e7f2      	b.n	e7a <gpio_set_pin_direction+0x2a>
     e94:	41004400 	.word	0x41004400
     e98:	40020000 	.word	0x40020000
     e9c:	c0020000 	.word	0xc0020000

00000ea0 <_gpio_set_pin_function>:
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
	uint8_t port = GPIO_PORT(gpio);
	uint8_t pin  = GPIO_PIN(gpio);
     ea0:	221f      	movs	r2, #31
{
     ea2:	b570      	push	{r4, r5, r6, lr}
	uint8_t pin  = GPIO_PIN(gpio);
     ea4:	4002      	ands	r2, r0
     ea6:	b2c4      	uxtb	r4, r0
	uint8_t port = GPIO_PORT(gpio);
     ea8:	0940      	lsrs	r0, r0, #5
     eaa:	01c0      	lsls	r0, r0, #7

	if (function == GPIO_PIN_FUNCTION_OFF) {
     eac:	1c4b      	adds	r3, r1, #1
     eae:	d107      	bne.n	ec0 <_gpio_set_pin_function+0x20>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eb0:	1810      	adds	r0, r2, r0
	tmp &= ~PORT_PINCFG_PMUXEN;
     eb2:	2201      	movs	r2, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     eb4:	4b10      	ldr	r3, [pc, #64]	; (ef8 <_gpio_set_pin_function+0x58>)
     eb6:	18c0      	adds	r0, r0, r3
     eb8:	7803      	ldrb	r3, [r0, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     eba:	4393      	bics	r3, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ebc:	7003      	strb	r3, [r0, #0]
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     ebe:	bd70      	pop	{r4, r5, r6, pc}
	tmp &= ~PORT_PINCFG_PMUXEN;
     ec0:	2501      	movs	r5, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ec2:	4b0e      	ldr	r3, [pc, #56]	; (efc <_gpio_set_pin_function+0x5c>)
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     ec4:	b2c9      	uxtb	r1, r1
     ec6:	18c0      	adds	r0, r0, r3
     ec8:	1886      	adds	r6, r0, r2
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     eca:	40ea      	lsrs	r2, r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     ecc:	3640      	adds	r6, #64	; 0x40
     ece:	7833      	ldrb	r3, [r6, #0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     ed0:	1880      	adds	r0, r0, r2
     ed2:	43ab      	bics	r3, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     ed4:	432b      	orrs	r3, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     ed6:	7033      	strb	r3, [r6, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     ed8:	3030      	adds	r0, #48	; 0x30
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     eda:	220f      	movs	r2, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     edc:	7803      	ldrb	r3, [r0, #0]
		if (pin & 1) {
     ede:	422c      	tst	r4, r5
     ee0:	d005      	beq.n	eee <_gpio_set_pin_function+0x4e>
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     ee2:	4013      	ands	r3, r2
	tmp |= PORT_PMUX_PMUXO(data);
     ee4:	0109      	lsls	r1, r1, #4
     ee6:	4319      	orrs	r1, r3
     ee8:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     eea:	7001      	strb	r1, [r0, #0]
}
     eec:	e7e7      	b.n	ebe <_gpio_set_pin_function+0x1e>
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     eee:	4393      	bics	r3, r2
	tmp |= PORT_PMUX_PMUXE(data);
     ef0:	4011      	ands	r1, r2
     ef2:	4319      	orrs	r1, r3
     ef4:	e7f9      	b.n	eea <_gpio_set_pin_function+0x4a>
     ef6:	46c0      	nop			; (mov r8, r8)
     ef8:	41004440 	.word	0x41004440
     efc:	41004400 	.word	0x41004400

00000f00 <DISPLAY_SPI_PORT_init>:
#include <hpl_pm_base.h>

struct spi_m_sync_descriptor DISPLAY_SPI;

void DISPLAY_SPI_PORT_init(void)
{
     f00:	b570      	push	{r4, r5, r6, lr}

	// Set pin direction to input
	gpio_set_pin_direction(PB02, GPIO_DIRECTION_IN);
     f02:	2101      	movs	r1, #1
     f04:	4d0f      	ldr	r5, [pc, #60]	; (f44 <DISPLAY_SPI_PORT_init+0x44>)
     f06:	2022      	movs	r0, #34	; 0x22
     f08:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     f0a:	2104      	movs	r1, #4
     f0c:	4a0e      	ldr	r2, [pc, #56]	; (f48 <DISPLAY_SPI_PORT_init+0x48>)
	_gpio_set_pin_function(pin, function);
     f0e:	4c0f      	ldr	r4, [pc, #60]	; (f4c <DISPLAY_SPI_PORT_init+0x4c>)
     f10:	7813      	ldrb	r3, [r2, #0]
     f12:	2022      	movs	r0, #34	; 0x22
     f14:	438b      	bics	r3, r1
     f16:	7013      	strb	r3, [r2, #0]
     f18:	490d      	ldr	r1, [pc, #52]	; (f50 <DISPLAY_SPI_PORT_init+0x50>)
     f1a:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     f1c:	2380      	movs	r3, #128	; 0x80
     f1e:	4e0d      	ldr	r6, [pc, #52]	; (f54 <DISPLAY_SPI_PORT_init+0x54>)
     f20:	03db      	lsls	r3, r3, #15
     f22:	6033      	str	r3, [r6, #0]
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB22, GPIO_DIRECTION_OUT);
     f24:	2102      	movs	r1, #2
     f26:	2036      	movs	r0, #54	; 0x36
     f28:	47a8      	blx	r5
     f2a:	2036      	movs	r0, #54	; 0x36
     f2c:	490a      	ldr	r1, [pc, #40]	; (f58 <DISPLAY_SPI_PORT_init+0x58>)
     f2e:	47a0      	blx	r4
     f30:	2380      	movs	r3, #128	; 0x80
     f32:	041b      	lsls	r3, r3, #16
     f34:	6033      	str	r3, [r6, #0]
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PB23, GPIO_DIRECTION_OUT);
     f36:	2102      	movs	r1, #2
     f38:	2037      	movs	r0, #55	; 0x37
     f3a:	47a8      	blx	r5
     f3c:	2037      	movs	r0, #55	; 0x37
     f3e:	4907      	ldr	r1, [pc, #28]	; (f5c <DISPLAY_SPI_PORT_init+0x5c>)
     f40:	47a0      	blx	r4

	gpio_set_pin_function(PB23, PINMUX_PB23D_SERCOM5_PAD3);
}
     f42:	bd70      	pop	{r4, r5, r6, pc}
     f44:	00000e51 	.word	0x00000e51
     f48:	410044c2 	.word	0x410044c2
     f4c:	00000ea1 	.word	0x00000ea1
     f50:	00220003 	.word	0x00220003
     f54:	60000094 	.word	0x60000094
     f58:	00360003 	.word	0x00360003
     f5c:	00370003 	.word	0x00370003

00000f60 <DISPLAY_SPI_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     f60:	2380      	movs	r3, #128	; 0x80
     f62:	4a04      	ldr	r2, [pc, #16]	; (f74 <DISPLAY_SPI_CLOCK_init+0x14>)
     f64:	6a11      	ldr	r1, [r2, #32]
     f66:	430b      	orrs	r3, r1
     f68:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
     f6a:	4b03      	ldr	r3, [pc, #12]	; (f78 <DISPLAY_SPI_CLOCK_init+0x18>)
     f6c:	4a03      	ldr	r2, [pc, #12]	; (f7c <DISPLAY_SPI_CLOCK_init+0x1c>)
     f6e:	805a      	strh	r2, [r3, #2]

void DISPLAY_SPI_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     f70:	4770      	bx	lr
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	40000400 	.word	0x40000400
     f78:	40000c00 	.word	0x40000c00
     f7c:	00004019 	.word	0x00004019

00000f80 <DISPLAY_SPI_init>:

void DISPLAY_SPI_init(void)
{
     f80:	b510      	push	{r4, lr}
	DISPLAY_SPI_CLOCK_init();
     f82:	4b04      	ldr	r3, [pc, #16]	; (f94 <DISPLAY_SPI_init+0x14>)
     f84:	4798      	blx	r3
	spi_m_sync_init(&DISPLAY_SPI, SERCOM5);
     f86:	4904      	ldr	r1, [pc, #16]	; (f98 <DISPLAY_SPI_init+0x18>)
     f88:	4b04      	ldr	r3, [pc, #16]	; (f9c <DISPLAY_SPI_init+0x1c>)
     f8a:	4805      	ldr	r0, [pc, #20]	; (fa0 <DISPLAY_SPI_init+0x20>)
     f8c:	4798      	blx	r3
	DISPLAY_SPI_PORT_init();
     f8e:	4b05      	ldr	r3, [pc, #20]	; (fa4 <DISPLAY_SPI_init+0x24>)
     f90:	4798      	blx	r3
}
     f92:	bd10      	pop	{r4, pc}
     f94:	00000f61 	.word	0x00000f61
     f98:	42001c00 	.word	0x42001c00
     f9c:	00000525 	.word	0x00000525
     fa0:	2000029c 	.word	0x2000029c
     fa4:	00000f01 	.word	0x00000f01

00000fa8 <system_init>:

void system_init(void)
{
     fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     faa:	4b24      	ldr	r3, [pc, #144]	; (103c <system_init+0x94>)
     fac:	4798      	blx	r3
     fae:	24c0      	movs	r4, #192	; 0xc0
     fb0:	2380      	movs	r3, #128	; 0x80
     fb2:	2701      	movs	r7, #1
     fb4:	05e4      	lsls	r4, r4, #23
     fb6:	041b      	lsls	r3, r3, #16
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(RES_PIN, GPIO_DIRECTION_OUT);
     fb8:	4d21      	ldr	r5, [pc, #132]	; (1040 <system_init+0x98>)
     fba:	427f      	negs	r7, r7
     fbc:	6163      	str	r3, [r4, #20]
     fbe:	2102      	movs	r1, #2
     fc0:	2017      	movs	r0, #23
     fc2:	47a8      	blx	r5
     fc4:	4e1f      	ldr	r6, [pc, #124]	; (1044 <system_init+0x9c>)
     fc6:	0039      	movs	r1, r7
     fc8:	2017      	movs	r0, #23
     fca:	47b0      	blx	r6
     fcc:	0023      	movs	r3, r4
     fce:	2208      	movs	r2, #8
     fd0:	3394      	adds	r3, #148	; 0x94
     fd2:	601a      	str	r2, [r3, #0]
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(CS_PIN, GPIO_DIRECTION_OUT);
     fd4:	2102      	movs	r1, #2
     fd6:	2023      	movs	r0, #35	; 0x23
     fd8:	47a8      	blx	r5
     fda:	0039      	movs	r1, r7
     fdc:	2023      	movs	r0, #35	; 0x23
     fde:	47b0      	blx	r6
     fe0:	2380      	movs	r3, #128	; 0x80
     fe2:	019b      	lsls	r3, r3, #6
     fe4:	6163      	str	r3, [r4, #20]
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(DC_PIN, GPIO_DIRECTION_OUT);
     fe6:	2102      	movs	r1, #2
     fe8:	200d      	movs	r0, #13
     fea:	47a8      	blx	r5
     fec:	0039      	movs	r1, r7
     fee:	200d      	movs	r0, #13
     ff0:	47b0      	blx	r6
	gpio_set_pin_function(DC_PIN, GPIO_PIN_FUNCTION_OFF);
	
	
	//BOTOES
	
	gpio_set_pin_direction(PA22, GPIO_DIRECTION_IN);
     ff2:	2101      	movs	r1, #1
     ff4:	2016      	movs	r0, #22
     ff6:	47a8      	blx	r5
	gpio_set_pin_direction(PA06, GPIO_DIRECTION_IN);
     ff8:	2101      	movs	r1, #1
     ffa:	2006      	movs	r0, #6
     ffc:	47a8      	blx	r5
	gpio_set_pin_direction(PA07, GPIO_DIRECTION_IN);
     ffe:	2101      	movs	r1, #1
    1000:	2007      	movs	r0, #7
    1002:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1004:	4b10      	ldr	r3, [pc, #64]	; (1048 <system_init+0xa0>)
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1006:	2080      	movs	r0, #128	; 0x80
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1008:	001d      	movs	r5, r3
    100a:	2204      	movs	r2, #4
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    100c:	03c0      	lsls	r0, r0, #15
    100e:	6060      	str	r0, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1010:	3556      	adds	r5, #86	; 0x56
    1012:	7829      	ldrb	r1, [r5, #0]
    1014:	3d10      	subs	r5, #16
    1016:	4311      	orrs	r1, r2
    1018:	7429      	strb	r1, [r5, #16]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    101a:	61a0      	str	r0, [r4, #24]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    101c:	2040      	movs	r0, #64	; 0x40
    101e:	6060      	str	r0, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    1020:	7829      	ldrb	r1, [r5, #0]
    1022:	3347      	adds	r3, #71	; 0x47
    1024:	4311      	orrs	r1, r2
    1026:	7029      	strb	r1, [r5, #0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1028:	2180      	movs	r1, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    102a:	61a0      	str	r0, [r4, #24]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    102c:	6061      	str	r1, [r4, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
    102e:	7818      	ldrb	r0, [r3, #0]
    1030:	4302      	orrs	r2, r0
    1032:	701a      	strb	r2, [r3, #0]
	
	gpio_set_pin_pull_mode(PA22, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PA06, GPIO_PULL_UP);
	gpio_set_pin_pull_mode(PA07, GPIO_PULL_UP);
	
	DISPLAY_SPI_init();
    1034:	4b05      	ldr	r3, [pc, #20]	; (104c <system_init+0xa4>)
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1036:	61a1      	str	r1, [r4, #24]
    1038:	4798      	blx	r3
}
    103a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    103c:	00000a85 	.word	0x00000a85
    1040:	00000e51 	.word	0x00000e51
    1044:	00000ea1 	.word	0x00000ea1
    1048:	41004400 	.word	0x41004400
    104c:	00000f81 	.word	0x00000f81

00001050 <hri_sercomspi_clear_CTRLA_ENABLE_bit>:
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
}

static inline void hri_sercomspi_wait_for_sync(const void *const hw, hri_sercomspi_syncbusy_reg_t reg)
{
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1050:	2303      	movs	r3, #3
    1052:	69c2      	ldr	r2, [r0, #28]
    1054:	421a      	tst	r2, r3
    1056:	d1fc      	bne.n	1052 <hri_sercomspi_clear_CTRLA_ENABLE_bit+0x2>

static inline void hri_sercomspi_clear_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE);
	((Sercom *)hw)->SPI.CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1058:	2202      	movs	r2, #2
    105a:	6803      	ldr	r3, [r0, #0]
    105c:	4393      	bics	r3, r2
    105e:	6003      	str	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    1060:	4770      	bx	lr

00001062 <_spi_sync_enable>:
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1062:	69c3      	ldr	r3, [r0, #28]
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    1064:	07db      	lsls	r3, r3, #31
    1066:	d40b      	bmi.n	1080 <_spi_sync_enable+0x1e>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    1068:	2203      	movs	r2, #3
    106a:	69c1      	ldr	r1, [r0, #28]
    106c:	000b      	movs	r3, r1
    106e:	4013      	ands	r3, r2
    1070:	4211      	tst	r1, r2
    1072:	d1fa      	bne.n	106a <_spi_sync_enable+0x8>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1074:	2202      	movs	r2, #2
    1076:	6801      	ldr	r1, [r0, #0]
    1078:	430a      	orrs	r2, r1
    107a:	6002      	str	r2, [r0, #0]
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    107c:	0018      	movs	r0, r3
}
    107e:	4770      	bx	lr
		return ERR_BUSY;
    1080:	2004      	movs	r0, #4
    1082:	4240      	negs	r0, r0
    1084:	e7fb      	b.n	107e <_spi_sync_enable+0x1c>
	...

00001088 <_spi_m_sync_init>:
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1088:	4b57      	ldr	r3, [pc, #348]	; (11e8 <_spi_m_sync_init+0x160>)

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    108a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    108c:	18cb      	adds	r3, r1, r3
    108e:	0a9b      	lsrs	r3, r3, #10
		if (sercomspi_regs[i].n == n) {
    1090:	b2db      	uxtb	r3, r3
{
    1092:	0006      	movs	r6, r0
    1094:	000d      	movs	r5, r1
	return NULL;
    1096:	2400      	movs	r4, #0
		if (sercomspi_regs[i].n == n) {
    1098:	2b05      	cmp	r3, #5
    109a:	d101      	bne.n	10a0 <_spi_m_sync_init+0x18>
			return &sercomspi_regs[i];
    109c:	4c53      	ldr	r4, [pc, #332]	; (11ec <_spi_m_sync_init+0x164>)
    109e:	3418      	adds	r4, #24
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    10a0:	1e30      	subs	r0, r6, #0
    10a2:	d002      	beq.n	10aa <_spi_m_sync_init+0x22>
    10a4:	0028      	movs	r0, r5
    10a6:	1e43      	subs	r3, r0, #1
    10a8:	4198      	sbcs	r0, r3
    10aa:	2701      	movs	r7, #1
    10ac:	4a50      	ldr	r2, [pc, #320]	; (11f0 <_spi_m_sync_init+0x168>)
    10ae:	4951      	ldr	r1, [pc, #324]	; (11f4 <_spi_m_sync_init+0x16c>)
    10b0:	4b51      	ldr	r3, [pc, #324]	; (11f8 <_spi_m_sync_init+0x170>)
    10b2:	4038      	ands	r0, r7
    10b4:	4798      	blx	r3

	if (regs == NULL) {
    10b6:	2c00      	cmp	r4, #0
    10b8:	d100      	bne.n	10bc <_spi_m_sync_init+0x34>
    10ba:	e091      	b.n	11e0 <_spi_m_sync_init+0x158>
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    10bc:	69eb      	ldr	r3, [r5, #28]
		return ERR_INVALID_ARG;
	}

	if (!hri_sercomspi_is_syncing(hw, SERCOM_SPI_SYNCBUSY_SWRST)) {
    10be:	423b      	tst	r3, r7
    10c0:	d115      	bne.n	10ee <_spi_m_sync_init+0x66>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    10c2:	7862      	ldrb	r2, [r4, #1]
    10c4:	7821      	ldrb	r1, [r4, #0]
    10c6:	0212      	lsls	r2, r2, #8
    10c8:	78a3      	ldrb	r3, [r4, #2]
    10ca:	4311      	orrs	r1, r2
    10cc:	78e2      	ldrb	r2, [r4, #3]
    10ce:	041b      	lsls	r3, r3, #16
    10d0:	430b      	orrs	r3, r1
    10d2:	0612      	lsls	r2, r2, #24
    10d4:	431a      	orrs	r2, r3

static inline hri_sercomspi_ctrla_reg_t hri_sercomspi_get_CTRLA_reg(const void *const         hw,
                                                                    hri_sercomspi_ctrla_reg_t mask)
{
	uint32_t tmp;
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    10d6:	682b      	ldr	r3, [r5, #0]
	tmp &= mask;
    10d8:	19ff      	adds	r7, r7, r7
    10da:	9201      	str	r2, [sp, #4]
		if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    10dc:	423b      	tst	r3, r7
    10de:	d151      	bne.n	1184 <_spi_m_sync_init+0xfc>
		uint32_t mode = regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk;
    10e0:	221c      	movs	r2, #28
    10e2:	9b01      	ldr	r3, [sp, #4]
    10e4:	4013      	ands	r3, r2
    10e6:	001a      	movs	r2, r3
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_ENABLE);
		}
		hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST | mode);
    10e8:	2301      	movs	r3, #1
    10ea:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLA_reg(const void *const hw, hri_sercomspi_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    10ec:	602b      	str	r3, [r5, #0]
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    10ee:	2301      	movs	r3, #1
    10f0:	69ea      	ldr	r2, [r5, #28]
    10f2:	421a      	tst	r2, r3
    10f4:	d1fc      	bne.n	10f0 <_spi_m_sync_init+0x68>
	}
	hri_sercomspi_wait_for_sync(hw, SERCOM_SPI_SYNCBUSY_SWRST);

	dev->prvt = hw;

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    10f6:	221c      	movs	r2, #28
    10f8:	7823      	ldrb	r3, [r4, #0]
    10fa:	4f40      	ldr	r7, [pc, #256]	; (11fc <_spi_m_sync_init+0x174>)
	dev->prvt = hw;
    10fc:	6035      	str	r5, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    10fe:	4013      	ands	r3, r2
    1100:	2b08      	cmp	r3, #8
    1102:	d146      	bne.n	1192 <_spi_m_sync_init+0x10a>
	ASSERT(hw && regs);
    1104:	4a3e      	ldr	r2, [pc, #248]	; (1200 <_spi_m_sync_init+0x178>)
    1106:	493b      	ldr	r1, [pc, #236]	; (11f4 <_spi_m_sync_init+0x16c>)
    1108:	4b3b      	ldr	r3, [pc, #236]	; (11f8 <_spi_m_sync_init+0x170>)
    110a:	2001      	movs	r0, #1
    110c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    110e:	7861      	ldrb	r1, [r4, #1]
    1110:	7823      	ldrb	r3, [r4, #0]
    1112:	78a2      	ldrb	r2, [r4, #2]
    1114:	0209      	lsls	r1, r1, #8
    1116:	4319      	orrs	r1, r3
    1118:	78e3      	ldrb	r3, [r4, #3]
    111a:	0412      	lsls	r2, r2, #16
    111c:	4311      	orrs	r1, r2
    111e:	061b      	lsls	r3, r3, #24
    1120:	430b      	orrs	r3, r1
	hri_sercomspi_write_CTRLA_reg(
    1122:	401f      	ands	r7, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1124:	602f      	str	r7, [r5, #0]
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    1126:	7961      	ldrb	r1, [r4, #5]
    1128:	7923      	ldrb	r3, [r4, #4]
    112a:	79a2      	ldrb	r2, [r4, #6]
    112c:	0209      	lsls	r1, r1, #8
    112e:	4319      	orrs	r1, r3
    1130:	79e3      	ldrb	r3, [r4, #7]
    1132:	0412      	lsls	r2, r2, #16
    1134:	4311      	orrs	r1, r2
    1136:	061b      	lsls	r3, r3, #24
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    1138:	4a32      	ldr	r2, [pc, #200]	; (1204 <_spi_m_sync_init+0x17c>)
	                              (regs->ctrlb & ~(SERCOM_SPI_CTRLB_MSSEN))
    113a:	430b      	orrs	r3, r1
	                                  | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_SSDE | SERCOM_SPI_CTRLB_PLOADEN));
    113c:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(hw,
    113e:	4a32      	ldr	r2, [pc, #200]	; (1208 <_spi_m_sync_init+0x180>)
    1140:	4313      	orrs	r3, r2
}

static inline void hri_sercomspi_write_CTRLB_reg(const void *const hw, hri_sercomspi_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1142:	606b      	str	r3, [r5, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1144:	7a61      	ldrb	r1, [r4, #9]
    1146:	7a23      	ldrb	r3, [r4, #8]
    1148:	7aa2      	ldrb	r2, [r4, #10]
    114a:	0209      	lsls	r1, r1, #8
    114c:	4319      	orrs	r1, r3
    114e:	7ae3      	ldrb	r3, [r4, #11]
    1150:	0412      	lsls	r2, r2, #16
    1152:	4311      	orrs	r1, r2
    1154:	061b      	lsls	r3, r3, #24
    1156:	430b      	orrs	r3, r1
}

static inline void hri_sercomspi_write_ADDR_reg(const void *const hw, hri_sercomspi_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1158:	626b      	str	r3, [r5, #36]	; 0x24
}

static inline void hri_sercomspi_write_DBGCTRL_reg(const void *const hw, hri_sercomspi_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    115a:	002b      	movs	r3, r5
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    115c:	7b62      	ldrb	r2, [r4, #13]
    115e:	3330      	adds	r3, #48	; 0x30
    1160:	701a      	strb	r2, [r3, #0]
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1162:	69eb      	ldr	r3, [r5, #28]
	while (hri_sercomspi_is_syncing(hw, 0xFFFFFFFF))
    1164:	2b00      	cmp	r3, #0
    1166:	d1fc      	bne.n	1162 <_spi_m_sync_init+0xda>
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1168:	2207      	movs	r2, #7
    116a:	7923      	ldrb	r3, [r4, #4]

	dev->dummy_byte = regs->dummy_byte;

	return ERR_NONE;
    116c:	2000      	movs	r0, #0
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    116e:	4013      	ands	r3, r2
    1170:	1e5a      	subs	r2, r3, #1
    1172:	4193      	sbcs	r3, r2
    1174:	3301      	adds	r3, #1
    1176:	7133      	strb	r3, [r6, #4]
	dev->dummy_byte = regs->dummy_byte;
    1178:	7be3      	ldrb	r3, [r4, #15]
    117a:	7ba2      	ldrb	r2, [r4, #14]
    117c:	021b      	lsls	r3, r3, #8
    117e:	4313      	orrs	r3, r2
    1180:	80f3      	strh	r3, [r6, #6]
}
    1182:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			hri_sercomspi_clear_CTRLA_ENABLE_bit(hw);
    1184:	0028      	movs	r0, r5
    1186:	4b21      	ldr	r3, [pc, #132]	; (120c <_spi_m_sync_init+0x184>)
    1188:	4798      	blx	r3
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    118a:	69eb      	ldr	r3, [r5, #28]
    118c:	423b      	tst	r3, r7
    118e:	d1fc      	bne.n	118a <_spi_m_sync_init+0x102>
    1190:	e7a6      	b.n	10e0 <_spi_m_sync_init+0x58>
	ASSERT(hw && regs);
    1192:	4a1f      	ldr	r2, [pc, #124]	; (1210 <_spi_m_sync_init+0x188>)
    1194:	4917      	ldr	r1, [pc, #92]	; (11f4 <_spi_m_sync_init+0x16c>)
    1196:	4b18      	ldr	r3, [pc, #96]	; (11f8 <_spi_m_sync_init+0x170>)
    1198:	2001      	movs	r0, #1
    119a:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    119c:	7861      	ldrb	r1, [r4, #1]
    119e:	7823      	ldrb	r3, [r4, #0]
    11a0:	78a2      	ldrb	r2, [r4, #2]
    11a2:	0209      	lsls	r1, r1, #8
    11a4:	4319      	orrs	r1, r3
    11a6:	78e3      	ldrb	r3, [r4, #3]
    11a8:	0412      	lsls	r2, r2, #16
    11aa:	4311      	orrs	r1, r2
    11ac:	061b      	lsls	r3, r3, #24
    11ae:	430b      	orrs	r3, r1
	hri_sercomspi_write_CTRLA_reg(
    11b0:	401f      	ands	r7, r3
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    11b2:	602f      	str	r7, [r5, #0]
	    (regs->ctrlb
    11b4:	7961      	ldrb	r1, [r4, #5]
    11b6:	7923      	ldrb	r3, [r4, #4]
    11b8:	79a2      	ldrb	r2, [r4, #6]
    11ba:	0209      	lsls	r1, r1, #8
    11bc:	4319      	orrs	r1, r3
    11be:	79e3      	ldrb	r3, [r4, #7]
    11c0:	0412      	lsls	r2, r2, #16
    11c2:	4311      	orrs	r1, r2
    11c4:	061b      	lsls	r3, r3, #24
	        | (SERCOM_SPI_CTRLB_RXEN));
    11c6:	4a13      	ldr	r2, [pc, #76]	; (1214 <_spi_m_sync_init+0x18c>)
	    (regs->ctrlb
    11c8:	430b      	orrs	r3, r1
	        | (SERCOM_SPI_CTRLB_RXEN));
    11ca:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    11cc:	2280      	movs	r2, #128	; 0x80
    11ce:	0292      	lsls	r2, r2, #10
    11d0:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    11d2:	606b      	str	r3, [r5, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    11d4:	7b23      	ldrb	r3, [r4, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    11d6:	732b      	strb	r3, [r5, #12]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    11d8:	7b63      	ldrb	r3, [r4, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    11da:	3530      	adds	r5, #48	; 0x30
    11dc:	702b      	strb	r3, [r5, #0]
}
    11de:	e7c3      	b.n	1168 <_spi_m_sync_init+0xe0>
		return ERR_INVALID_ARG;
    11e0:	200d      	movs	r0, #13
    11e2:	4240      	negs	r0, r0
    11e4:	e7cd      	b.n	1182 <_spi_m_sync_init+0xfa>
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	bdfff800 	.word	0xbdfff800
    11ec:	0000158c 	.word	0x0000158c
    11f0:	00000925 	.word	0x00000925
    11f4:	0000156f 	.word	0x0000156f
    11f8:	00000ad7 	.word	0x00000ad7
    11fc:	fffffefc 	.word	0xfffffefc
    1200:	00000903 	.word	0x00000903
    1204:	fffdddbf 	.word	0xfffdddbf
    1208:	00020240 	.word	0x00020240
    120c:	00001051 	.word	0x00001051
    1210:	000008ef 	.word	0x000008ef
    1214:	fffd1dbf 	.word	0xfffd1dbf

00001218 <_spi_m_sync_enable>:
{
	return _spi_deinit(dev->prvt);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1218:	b510      	push	{r4, lr}
    121a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    121c:	d002      	beq.n	1224 <_spi_m_sync_enable+0xc>
    121e:	6800      	ldr	r0, [r0, #0]
    1220:	1e43      	subs	r3, r0, #1
    1222:	4198      	sbcs	r0, r3
    1224:	2298      	movs	r2, #152	; 0x98
    1226:	4904      	ldr	r1, [pc, #16]	; (1238 <_spi_m_sync_enable+0x20>)
    1228:	0112      	lsls	r2, r2, #4
    122a:	4b04      	ldr	r3, [pc, #16]	; (123c <_spi_m_sync_enable+0x24>)
    122c:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    122e:	6820      	ldr	r0, [r4, #0]
    1230:	4b03      	ldr	r3, [pc, #12]	; (1240 <_spi_m_sync_enable+0x28>)
    1232:	4798      	blx	r3
}
    1234:	bd10      	pop	{r4, pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	0000156f 	.word	0x0000156f
    123c:	00000ad7 	.word	0x00000ad7
    1240:	00001063 	.word	0x00001063

00001244 <_spi_m_sync_trans>:

	return ERR_NONE;
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1244:	b5f0      	push	{r4, r5, r6, r7, lr}
	void *                 hw   = dev->prvt;
    1246:	6804      	ldr	r4, [r0, #0]
{
    1248:	b085      	sub	sp, #20
    124a:	9001      	str	r0, [sp, #4]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    124c:	7903      	ldrb	r3, [r0, #4]

	ASSERT(dev && hw);
    124e:	0020      	movs	r0, r4
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1250:	9302      	str	r3, [sp, #8]
	ASSERT(dev && hw);
    1252:	1e43      	subs	r3, r0, #1
    1254:	4198      	sbcs	r0, r3
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1256:	680e      	ldr	r6, [r1, #0]
    1258:	684d      	ldr	r5, [r1, #4]
	ASSERT(dev && hw);
    125a:	4b2f      	ldr	r3, [pc, #188]	; (1318 <_spi_m_sync_trans+0xd4>)
{
    125c:	000f      	movs	r7, r1
	ASSERT(dev && hw);
    125e:	4a2f      	ldr	r2, [pc, #188]	; (131c <_spi_m_sync_trans+0xd8>)
    1260:	492f      	ldr	r1, [pc, #188]	; (1320 <_spi_m_sync_trans+0xdc>)
    1262:	b2c0      	uxtb	r0, r0
    1264:	4798      	blx	r3
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
    1266:	69e3      	ldr	r3, [r4, #28]

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(
    1268:	075b      	lsls	r3, r3, #29
    126a:	d14f      	bne.n	130c <_spi_m_sync_trans+0xc8>
	while (((Sercom *)hw)->SPI.SYNCBUSY.reg & reg) {
    126c:	2303      	movs	r3, #3
    126e:	69e2      	ldr	r2, [r4, #28]
    1270:	0010      	movs	r0, r2
    1272:	4018      	ands	r0, r3
    1274:	421a      	tst	r2, r3
    1276:	d1fa      	bne.n	126e <_spi_m_sync_trans+0x2a>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1278:	6823      	ldr	r3, [r4, #0]
	        hw, (SERCOM_SPI_SYNCBUSY_SWRST | SERCOM_SPI_SYNCBUSY_ENABLE | SERCOM_SPI_SYNCBUSY_CTRLB))) {
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    127a:	079b      	lsls	r3, r3, #30
    127c:	d549      	bpl.n	1312 <_spi_m_sync_trans+0xce>
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    127e:	0002      	movs	r2, r0
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1280:	7e23      	ldrb	r3, [r4, #24]
    1282:	b2d9      	uxtb	r1, r3
    1284:	9103      	str	r1, [sp, #12]
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1286:	2104      	movs	r1, #4
    1288:	420b      	tst	r3, r1
    128a:	d113      	bne.n	12b4 <_spi_m_sync_trans+0x70>
		uint32_t iflag = hri_sercomspi_read_INTFLAG_reg(hw);

		if (!_spi_rx_check_and_receive(hw, iflag, &ctrl)) {
			/* In master mode, do not start next byte before previous byte received
			 * to make better output waveform */
			if (ctrl.rxcnt >= ctrl.txcnt) {
    128c:	4290      	cmp	r0, r2
    128e:	d81a      	bhi.n	12c6 <_spi_m_sync_trans+0x82>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1290:	2301      	movs	r3, #1
    1292:	9903      	ldr	r1, [sp, #12]
    1294:	4219      	tst	r1, r3
    1296:	d016      	beq.n	12c6 <_spi_m_sync_trans+0x82>
				_spi_tx_check_and_send(hw, iflag, &ctrl, dev->dummy_byte);
    1298:	9b01      	ldr	r3, [sp, #4]
    129a:	88db      	ldrh	r3, [r3, #6]
	if (ctrl->txbuf) {
    129c:	2e00      	cmp	r6, #0
    129e:	d006      	beq.n	12ae <_spi_m_sync_trans+0x6a>
		data = *ctrl->txbuf++;
    12a0:	7833      	ldrb	r3, [r6, #0]
    12a2:	469c      	mov	ip, r3
		if (ctrl->char_size > 1) {
    12a4:	9b02      	ldr	r3, [sp, #8]
    12a6:	2b01      	cmp	r3, #1
    12a8:	d81c      	bhi.n	12e4 <_spi_m_sync_trans+0xa0>
		data = *ctrl->txbuf++;
    12aa:	4663      	mov	r3, ip
    12ac:	3601      	adds	r6, #1
	ctrl->txcnt++;
    12ae:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    12b0:	62a3      	str	r3, [r4, #40]	; 0x28
}
    12b2:	e008      	b.n	12c6 <_spi_m_sync_trans+0x82>
	return ((Sercom *)hw)->SPI.DATA.reg;
    12b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (ctrl->rxbuf) {
    12b6:	2d00      	cmp	r5, #0
    12b8:	d004      	beq.n	12c4 <_spi_m_sync_trans+0x80>
		if (ctrl->char_size > 1) {
    12ba:	9902      	ldr	r1, [sp, #8]
		*ctrl->rxbuf++ = (uint8_t)data;
    12bc:	702b      	strb	r3, [r5, #0]
		if (ctrl->char_size > 1) {
    12be:	2901      	cmp	r1, #1
    12c0:	d80c      	bhi.n	12dc <_spi_m_sync_trans+0x98>
		*ctrl->rxbuf++ = (uint8_t)data;
    12c2:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    12c4:	3201      	adds	r2, #1
	if (SERCOM_SPI_INTFLAG_ERROR & iflag) {
    12c6:	466b      	mov	r3, sp
    12c8:	210c      	movs	r1, #12
    12ca:	5659      	ldrsb	r1, [r3, r1]
    12cc:	2900      	cmp	r1, #0
    12ce:	db0f      	blt.n	12f0 <_spi_m_sync_trans+0xac>
		rc = _spi_err_check(iflag, hw);

		if (rc < 0) {
			break;
		}
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    12d0:	68bb      	ldr	r3, [r7, #8]
    12d2:	4283      	cmp	r3, r0
    12d4:	d8d4      	bhi.n	1280 <_spi_m_sync_trans+0x3c>
    12d6:	4293      	cmp	r3, r2
    12d8:	d8d2      	bhi.n	1280 <_spi_m_sync_trans+0x3c>
    12da:	e010      	b.n	12fe <_spi_m_sync_trans+0xba>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    12dc:	0a1b      	lsrs	r3, r3, #8
    12de:	706b      	strb	r3, [r5, #1]
    12e0:	3502      	adds	r5, #2
    12e2:	e7ef      	b.n	12c4 <_spi_m_sync_trans+0x80>
			data |= (*ctrl->txbuf) << 8;
    12e4:	4661      	mov	r1, ip
    12e6:	7873      	ldrb	r3, [r6, #1]
			ctrl->txbuf++;
    12e8:	3602      	adds	r6, #2
			data |= (*ctrl->txbuf) << 8;
    12ea:	021b      	lsls	r3, r3, #8
    12ec:	430b      	orrs	r3, r1
			ctrl->txbuf++;
    12ee:	e7de      	b.n	12ae <_spi_m_sync_trans+0x6a>
}

static inline void hri_sercomspi_clear_STATUS_reg(const void *const hw, hri_sercomspi_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.STATUS.reg = mask;
    12f0:	2301      	movs	r3, #1
		return ERR_OVERFLOW;
    12f2:	2013      	movs	r0, #19
    12f4:	425b      	negs	r3, r3
    12f6:	8363      	strh	r3, [r4, #26]
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    12f8:	3381      	adds	r3, #129	; 0x81
    12fa:	7623      	strb	r3, [r4, #24]
    12fc:	4240      	negs	r0, r0
	tmp &= mask;
    12fe:	2303      	movs	r3, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1300:	7e22      	ldrb	r2, [r4, #24]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1302:	421a      	tst	r2, r3
    1304:	d0fc      	beq.n	1300 <_spi_m_sync_trans+0xbc>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1306:	7623      	strb	r3, [r4, #24]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1308:	b005      	add	sp, #20
    130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return ERR_BUSY;
    130c:	2004      	movs	r0, #4
		return ERR_NOT_INITIALIZED;
    130e:	4240      	negs	r0, r0
    1310:	e7fa      	b.n	1308 <_spi_m_sync_trans+0xc4>
    1312:	2014      	movs	r0, #20
    1314:	e7fb      	b.n	130e <_spi_m_sync_trans+0xca>
    1316:	46c0      	nop			; (mov r8, r8)
    1318:	00000ad7 	.word	0x00000ad7
    131c:	00000a85 	.word	0x00000a85
    1320:	0000156f 	.word	0x0000156f

00001324 <display_ctrl_mono_construct>:
 */
struct display_ctrl_mono *display_ctrl_mono_construct(struct display_ctrl_mono *const           me,
                                                      struct io_descriptor *const               io,
                                                      struct display_ctrl_mono_interface *const interface)
{
	me->io        = io;
    1324:	6001      	str	r1, [r0, #0]
	me->interface = interface;
    1326:	6042      	str	r2, [r0, #4]

	return me;
}
    1328:	4770      	bx	lr
	...

0000132c <display_ctrl_mono_hard_reset>:

/**
 * \brief Perform the hard reset of display controller
 */
void display_ctrl_mono_hard_reset(const uint8_t pin, const uint32_t delay)
{
    132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    132e:	231f      	movs	r3, #31
    1330:	2501      	movs	r5, #1
    1332:	4003      	ands	r3, r0
    1334:	409d      	lsls	r5, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1336:	23c0      	movs	r3, #192	; 0xc0
    1338:	0944      	lsrs	r4, r0, #5
    133a:	05db      	lsls	r3, r3, #23
    133c:	01e4      	lsls	r4, r4, #7
	gpio_set_pin_level(pin, false);
	delay_us(delay);
    133e:	b28e      	uxth	r6, r1
    1340:	18e4      	adds	r4, r4, r3
    1342:	0030      	movs	r0, r6
    1344:	4f03      	ldr	r7, [pc, #12]	; (1354 <display_ctrl_mono_hard_reset+0x28>)
    1346:	6165      	str	r5, [r4, #20]
    1348:	47b8      	blx	r7
	gpio_set_pin_level(pin, true);
	delay_us(delay);
    134a:	0030      	movs	r0, r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    134c:	61a5      	str	r5, [r4, #24]
    134e:	47b8      	blx	r7
}
    1350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	000009c9 	.word	0x000009c9

00001358 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
    1358:	b510      	push	{r4, lr}
	system_init();
    135a:	4b02      	ldr	r3, [pc, #8]	; (1364 <atmel_start_init+0xc>)
    135c:	4798      	blx	r3
	gfx_mono_init();
    135e:	4b02      	ldr	r3, [pc, #8]	; (1368 <atmel_start_init+0x10>)
    1360:	4798      	blx	r3
}
    1362:	bd10      	pop	{r4, pc}
    1364:	00000fa9 	.word	0x00000fa9
    1368:	000009e9 	.word	0x000009e9

0000136c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    136c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
    1370:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1372:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1374:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
    1378:	4770      	bx	lr

0000137a <atomic_leave_critical>:
    137a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
    137e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    1380:	f383 8810 	msr	PRIMASK, r3
}
    1384:	4770      	bx	lr
	...

00001388 <__udivsi3>:
    1388:	2200      	movs	r2, #0
    138a:	0843      	lsrs	r3, r0, #1
    138c:	428b      	cmp	r3, r1
    138e:	d374      	bcc.n	147a <__udivsi3+0xf2>
    1390:	0903      	lsrs	r3, r0, #4
    1392:	428b      	cmp	r3, r1
    1394:	d35f      	bcc.n	1456 <__udivsi3+0xce>
    1396:	0a03      	lsrs	r3, r0, #8
    1398:	428b      	cmp	r3, r1
    139a:	d344      	bcc.n	1426 <__udivsi3+0x9e>
    139c:	0b03      	lsrs	r3, r0, #12
    139e:	428b      	cmp	r3, r1
    13a0:	d328      	bcc.n	13f4 <__udivsi3+0x6c>
    13a2:	0c03      	lsrs	r3, r0, #16
    13a4:	428b      	cmp	r3, r1
    13a6:	d30d      	bcc.n	13c4 <__udivsi3+0x3c>
    13a8:	22ff      	movs	r2, #255	; 0xff
    13aa:	0209      	lsls	r1, r1, #8
    13ac:	ba12      	rev	r2, r2
    13ae:	0c03      	lsrs	r3, r0, #16
    13b0:	428b      	cmp	r3, r1
    13b2:	d302      	bcc.n	13ba <__udivsi3+0x32>
    13b4:	1212      	asrs	r2, r2, #8
    13b6:	0209      	lsls	r1, r1, #8
    13b8:	d065      	beq.n	1486 <__udivsi3+0xfe>
    13ba:	0b03      	lsrs	r3, r0, #12
    13bc:	428b      	cmp	r3, r1
    13be:	d319      	bcc.n	13f4 <__udivsi3+0x6c>
    13c0:	e000      	b.n	13c4 <__udivsi3+0x3c>
    13c2:	0a09      	lsrs	r1, r1, #8
    13c4:	0bc3      	lsrs	r3, r0, #15
    13c6:	428b      	cmp	r3, r1
    13c8:	d301      	bcc.n	13ce <__udivsi3+0x46>
    13ca:	03cb      	lsls	r3, r1, #15
    13cc:	1ac0      	subs	r0, r0, r3
    13ce:	4152      	adcs	r2, r2
    13d0:	0b83      	lsrs	r3, r0, #14
    13d2:	428b      	cmp	r3, r1
    13d4:	d301      	bcc.n	13da <__udivsi3+0x52>
    13d6:	038b      	lsls	r3, r1, #14
    13d8:	1ac0      	subs	r0, r0, r3
    13da:	4152      	adcs	r2, r2
    13dc:	0b43      	lsrs	r3, r0, #13
    13de:	428b      	cmp	r3, r1
    13e0:	d301      	bcc.n	13e6 <__udivsi3+0x5e>
    13e2:	034b      	lsls	r3, r1, #13
    13e4:	1ac0      	subs	r0, r0, r3
    13e6:	4152      	adcs	r2, r2
    13e8:	0b03      	lsrs	r3, r0, #12
    13ea:	428b      	cmp	r3, r1
    13ec:	d301      	bcc.n	13f2 <__udivsi3+0x6a>
    13ee:	030b      	lsls	r3, r1, #12
    13f0:	1ac0      	subs	r0, r0, r3
    13f2:	4152      	adcs	r2, r2
    13f4:	0ac3      	lsrs	r3, r0, #11
    13f6:	428b      	cmp	r3, r1
    13f8:	d301      	bcc.n	13fe <__udivsi3+0x76>
    13fa:	02cb      	lsls	r3, r1, #11
    13fc:	1ac0      	subs	r0, r0, r3
    13fe:	4152      	adcs	r2, r2
    1400:	0a83      	lsrs	r3, r0, #10
    1402:	428b      	cmp	r3, r1
    1404:	d301      	bcc.n	140a <__udivsi3+0x82>
    1406:	028b      	lsls	r3, r1, #10
    1408:	1ac0      	subs	r0, r0, r3
    140a:	4152      	adcs	r2, r2
    140c:	0a43      	lsrs	r3, r0, #9
    140e:	428b      	cmp	r3, r1
    1410:	d301      	bcc.n	1416 <__udivsi3+0x8e>
    1412:	024b      	lsls	r3, r1, #9
    1414:	1ac0      	subs	r0, r0, r3
    1416:	4152      	adcs	r2, r2
    1418:	0a03      	lsrs	r3, r0, #8
    141a:	428b      	cmp	r3, r1
    141c:	d301      	bcc.n	1422 <__udivsi3+0x9a>
    141e:	020b      	lsls	r3, r1, #8
    1420:	1ac0      	subs	r0, r0, r3
    1422:	4152      	adcs	r2, r2
    1424:	d2cd      	bcs.n	13c2 <__udivsi3+0x3a>
    1426:	09c3      	lsrs	r3, r0, #7
    1428:	428b      	cmp	r3, r1
    142a:	d301      	bcc.n	1430 <__udivsi3+0xa8>
    142c:	01cb      	lsls	r3, r1, #7
    142e:	1ac0      	subs	r0, r0, r3
    1430:	4152      	adcs	r2, r2
    1432:	0983      	lsrs	r3, r0, #6
    1434:	428b      	cmp	r3, r1
    1436:	d301      	bcc.n	143c <__udivsi3+0xb4>
    1438:	018b      	lsls	r3, r1, #6
    143a:	1ac0      	subs	r0, r0, r3
    143c:	4152      	adcs	r2, r2
    143e:	0943      	lsrs	r3, r0, #5
    1440:	428b      	cmp	r3, r1
    1442:	d301      	bcc.n	1448 <__udivsi3+0xc0>
    1444:	014b      	lsls	r3, r1, #5
    1446:	1ac0      	subs	r0, r0, r3
    1448:	4152      	adcs	r2, r2
    144a:	0903      	lsrs	r3, r0, #4
    144c:	428b      	cmp	r3, r1
    144e:	d301      	bcc.n	1454 <__udivsi3+0xcc>
    1450:	010b      	lsls	r3, r1, #4
    1452:	1ac0      	subs	r0, r0, r3
    1454:	4152      	adcs	r2, r2
    1456:	08c3      	lsrs	r3, r0, #3
    1458:	428b      	cmp	r3, r1
    145a:	d301      	bcc.n	1460 <__udivsi3+0xd8>
    145c:	00cb      	lsls	r3, r1, #3
    145e:	1ac0      	subs	r0, r0, r3
    1460:	4152      	adcs	r2, r2
    1462:	0883      	lsrs	r3, r0, #2
    1464:	428b      	cmp	r3, r1
    1466:	d301      	bcc.n	146c <__udivsi3+0xe4>
    1468:	008b      	lsls	r3, r1, #2
    146a:	1ac0      	subs	r0, r0, r3
    146c:	4152      	adcs	r2, r2
    146e:	0843      	lsrs	r3, r0, #1
    1470:	428b      	cmp	r3, r1
    1472:	d301      	bcc.n	1478 <__udivsi3+0xf0>
    1474:	004b      	lsls	r3, r1, #1
    1476:	1ac0      	subs	r0, r0, r3
    1478:	4152      	adcs	r2, r2
    147a:	1a41      	subs	r1, r0, r1
    147c:	d200      	bcs.n	1480 <__udivsi3+0xf8>
    147e:	4601      	mov	r1, r0
    1480:	4152      	adcs	r2, r2
    1482:	4610      	mov	r0, r2
    1484:	4770      	bx	lr
    1486:	e7ff      	b.n	1488 <__udivsi3+0x100>
    1488:	b501      	push	{r0, lr}
    148a:	2000      	movs	r0, #0
    148c:	f000 f806 	bl	149c <__aeabi_idiv0>
    1490:	bd02      	pop	{r1, pc}
    1492:	46c0      	nop			; (mov r8, r8)

00001494 <__aeabi_uidivmod>:
    1494:	2900      	cmp	r1, #0
    1496:	d0f7      	beq.n	1488 <__udivsi3+0x100>
    1498:	e776      	b.n	1388 <__udivsi3>
    149a:	4770      	bx	lr

0000149c <__aeabi_idiv0>:
    149c:	4770      	bx	lr
    149e:	46c0      	nop			; (mov r8, r8)

000014a0 <__libc_init_array>:
    14a0:	b570      	push	{r4, r5, r6, lr}
    14a2:	2600      	movs	r6, #0
    14a4:	4d0c      	ldr	r5, [pc, #48]	; (14d8 <__libc_init_array+0x38>)
    14a6:	4c0d      	ldr	r4, [pc, #52]	; (14dc <__libc_init_array+0x3c>)
    14a8:	1b64      	subs	r4, r4, r5
    14aa:	10a4      	asrs	r4, r4, #2
    14ac:	42a6      	cmp	r6, r4
    14ae:	d109      	bne.n	14c4 <__libc_init_array+0x24>
    14b0:	2600      	movs	r6, #0
    14b2:	f000 f9c9 	bl	1848 <_init>
    14b6:	4d0a      	ldr	r5, [pc, #40]	; (14e0 <__libc_init_array+0x40>)
    14b8:	4c0a      	ldr	r4, [pc, #40]	; (14e4 <__libc_init_array+0x44>)
    14ba:	1b64      	subs	r4, r4, r5
    14bc:	10a4      	asrs	r4, r4, #2
    14be:	42a6      	cmp	r6, r4
    14c0:	d105      	bne.n	14ce <__libc_init_array+0x2e>
    14c2:	bd70      	pop	{r4, r5, r6, pc}
    14c4:	00b3      	lsls	r3, r6, #2
    14c6:	58eb      	ldr	r3, [r5, r3]
    14c8:	4798      	blx	r3
    14ca:	3601      	adds	r6, #1
    14cc:	e7ee      	b.n	14ac <__libc_init_array+0xc>
    14ce:	00b3      	lsls	r3, r6, #2
    14d0:	58eb      	ldr	r3, [r5, r3]
    14d2:	4798      	blx	r3
    14d4:	3601      	adds	r6, #1
    14d6:	e7f2      	b.n	14be <__libc_init_array+0x1e>
    14d8:	00001854 	.word	0x00001854
    14dc:	00001854 	.word	0x00001854
    14e0:	00001854 	.word	0x00001854
    14e4:	00001858 	.word	0x00001858

000014e8 <memcpy>:
    14e8:	2300      	movs	r3, #0
    14ea:	b510      	push	{r4, lr}
    14ec:	429a      	cmp	r2, r3
    14ee:	d100      	bne.n	14f2 <memcpy+0xa>
    14f0:	bd10      	pop	{r4, pc}
    14f2:	5ccc      	ldrb	r4, [r1, r3]
    14f4:	54c4      	strb	r4, [r0, r3]
    14f6:	3301      	adds	r3, #1
    14f8:	e7f8      	b.n	14ec <memcpy+0x4>

000014fa <memset>:
    14fa:	0003      	movs	r3, r0
    14fc:	1882      	adds	r2, r0, r2
    14fe:	4293      	cmp	r3, r2
    1500:	d100      	bne.n	1504 <memset+0xa>
    1502:	4770      	bx	lr
    1504:	7019      	strb	r1, [r3, #0]
    1506:	3301      	adds	r3, #1
    1508:	e7f9      	b.n	14fe <memset+0x4>
    150a:	2e2e      	.short	0x2e2e
    150c:	6c61682f 	.word	0x6c61682f
    1510:	6372732f 	.word	0x6372732f
    1514:	6c61682f 	.word	0x6c61682f
    1518:	6970735f 	.word	0x6970735f
    151c:	735f6d5f 	.word	0x735f6d5f
    1520:	2e636e79 	.word	0x2e636e79
    1524:	0063      	.short	0x0063
    1526:	2e2e      	.short	0x2e2e
    1528:	7866672f 	.word	0x7866672f
    152c:	6e6f6d5f 	.word	0x6e6f6d5f
    1530:	66672f6f 	.word	0x66672f6f
    1534:	6f6d5f78 	.word	0x6f6d5f78
    1538:	745f6f6e 	.word	0x745f6f6e
    153c:	2e747865 	.word	0x2e747865
    1540:	0063      	.short	0x0063
    1542:	2020      	.short	0x2020
    1544:	20202020 	.word	0x20202020
    1548:	20202020 	.word	0x20202020
    154c:	20202020 	.word	0x20202020
    1550:	6d655400 	.word	0x6d655400
    1554:	61726570 	.word	0x61726570
    1558:	61727574 	.word	0x61727574
    155c:	754c0021 	.word	0x754c0021
    1560:	4f00217a 	.word	0x4f00217a
    1564:	6e656972 	.word	0x6e656972
    1568:	61636174 	.word	0x61636174
    156c:	216f      	.short	0x216f
    156e:	00          	.byte	0x00
    156f:	2e          	.byte	0x2e
    1570:	70682f2e 	.word	0x70682f2e
    1574:	65732f6c 	.word	0x65732f6c
    1578:	6d6f6372 	.word	0x6d6f6372
    157c:	6c70682f 	.word	0x6c70682f
    1580:	7265735f 	.word	0x7265735f
    1584:	2e6d6f63 	.word	0x2e6d6f63
    1588:	00000063 	.word	0x00000063

0000158c <_i2cms>:
	...

000015a4 <sercomspi_regs>:
    15a4:	0001000c 00020000 00000000 01ff0009     ................
    15b4:	                                         .

000015b5 <basic_6x7_glyphs>:
    15b5:	00000000 20000000 20202020 50502000     .......     . PP
    15c5:	00000050 f8505000 5050f850 70a07820     P....PP.P.PP x.p
    15d5:	c020f028 402010c8 90601898 90a840a0     (. ... @..`..@..
    15e5:	40206068 00000000 40402010 40102040     h` @..... @@@ .@
    15f5:	10101020 50004020 5020f820 20200000      ... @.P . P..  
    1605:	002020f8 00000000 00402060 00f80000     .  .....` @.....
    1615:	00000000 60000000 10080060 00804020     .......``... @..
    1625:	a8988870 207088c8 20202060 88707020     p.....p `    pp.
    1635:	40201008 2010f8f8 70880810 90503010     .. @... ...p.0P.
    1645:	f81010f8 0808f080 40307088 8888f080     .........p0@....
    1655:	1008f870 40404020 70888870 70708888     p... @@@p..p..pp
    1665:	08788888 60006010 60600060 60600000     ..x..`.``.``..``
    1675:	40206000 40201008 00081020 f800f800     .` @.. @ .......
    1685:	40800000 40201020 08887080 20002010     ...@ . @.p... . 
    1695:	68088870 7070a8a8 f8888888 88f08888     p..h..pp........
    16a5:	8888f088 808870f0 70888080 888890e0     .....p.....p....
    16b5:	f8e09088 80f08080 80f8f880 8080e080     ................
    16c5:	80887080 70889880 f8888888 70888888     .p.....p.......p
    16d5:	20202020 10387020 90101010 a0908860          p8.....`...
    16e5:	8890a0c0 80808080 88f88080 8888a8d8     ................
    16f5:	88888888 8898a8c8 88887088 70888888     .........p.....p
    1705:	f08888f0 70808080 a8888888 88f06890     .......p.....h..
    1715:	90a0f088 80807888 f0080870 202020f8     .....x..p....   
    1725:	88202020 88888888 88887088 50888888        ......p.....P
    1735:	88888820 88d8a8a8 20508888 88888850      .........P P...
    1745:	20205088 08f82020 80402010 202038f8     .P    ... @..8  
    1755:	38202020 20408000 e0000810 20202020        8..@ ....    
    1765:	5020e020 00000088 00000000 f8000000      . P............
    1775:	00102040 00000000 78087000 80807888     @ .......p.x.x..
    1785:	8888c8b0 700000f0 70888080 98680808     .......p...p..h.
    1795:	00788888 f8887000 48307080 4040e040     ..x..p...p0H@.@@
    17a5:	78000040 30087888 c8b08080 20888888     @..x.x.0....... 
    17b5:	20206000 00107020 90101030 48404060     .`   p..0...`@@H
    17c5:	48506050 20202060 00702020 a8a8d000     P`PH`     p.....
    17d5:	00008888 8888c8b0 70000088 70888888     ...........p...p
    17e5:	88f00000 008080f0 78986800 00000808     .........h.x....
    17f5:	8080c8b0 70000080 f0087080 40e04040     .......p.p..@@.@
    1805:	00304840 88888800 00006898 50888888     @H0......h.....P
    1815:	88000020 50a8a888 50880000 00885020      ......P...P P..
    1825:	78888800 00007008 402010f8 202010f8     ...x.p.... @..  
    1835:	10202040 20202020 40202020 20102020     @  .       @  . 
    1845:	                                          @.

00001848 <_init>:
    1848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    184a:	46c0      	nop			; (mov r8, r8)
    184c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    184e:	bc08      	pop	{r3}
    1850:	469e      	mov	lr, r3
    1852:	4770      	bx	lr

00001854 <__frame_dummy_init_array_entry>:
    1854:	00dd 0000                                   ....

00001858 <_fini>:
    1858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    185e:	bc08      	pop	{r3}
    1860:	469e      	mov	lr, r3
    1862:	4770      	bx	lr

00001864 <__do_global_dtors_aux_fini_array_entry>:
    1864:	00b5 0000                                   ....
